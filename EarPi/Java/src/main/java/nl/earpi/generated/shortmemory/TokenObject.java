/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package nl.earpi.generated.shortmemory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-01-01")
public class TokenObject implements org.apache.thrift.TBase<TokenObject, TokenObject._Fields>, java.io.Serializable, Cloneable, Comparable<TokenObject> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TokenObject");

  private static final org.apache.thrift.protocol.TField DEVICE_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceToken", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PERSON_FIELD_DESC = new org.apache.thrift.protocol.TField("person", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField IMAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("image", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("date", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.DOUBLE, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TokenObjectStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TokenObjectTupleSchemeFactory();

  public java.lang.String deviceToken; // required
  public java.lang.String person; // optional
  public java.lang.String token; // required
  public java.nio.ByteBuffer image; // optional
  public java.lang.String date; // optional
  public double time; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DEVICE_TOKEN((short)1, "deviceToken"),
    PERSON((short)2, "person"),
    TOKEN((short)3, "token"),
    IMAGE((short)4, "image"),
    DATE((short)5, "date"),
    TIME((short)6, "time");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DEVICE_TOKEN
          return DEVICE_TOKEN;
        case 2: // PERSON
          return PERSON;
        case 3: // TOKEN
          return TOKEN;
        case 4: // IMAGE
          return IMAGE;
        case 5: // DATE
          return DATE;
        case 6: // TIME
          return TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TIME_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.PERSON,_Fields.IMAGE,_Fields.DATE,_Fields.TIME};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DEVICE_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("deviceToken", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PERSON, new org.apache.thrift.meta_data.FieldMetaData("person", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IMAGE, new org.apache.thrift.meta_data.FieldMetaData("image", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.DATE, new org.apache.thrift.meta_data.FieldMetaData("date", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TokenObject.class, metaDataMap);
  }

  public TokenObject() {
  }

  public TokenObject(
    java.lang.String deviceToken,
    java.lang.String token)
  {
    this();
    this.deviceToken = deviceToken;
    this.token = token;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TokenObject(TokenObject other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetDeviceToken()) {
      this.deviceToken = other.deviceToken;
    }
    if (other.isSetPerson()) {
      this.person = other.person;
    }
    if (other.isSetToken()) {
      this.token = other.token;
    }
    if (other.isSetImage()) {
      this.image = org.apache.thrift.TBaseHelper.copyBinary(other.image);
    }
    if (other.isSetDate()) {
      this.date = other.date;
    }
    this.time = other.time;
  }

  public TokenObject deepCopy() {
    return new TokenObject(this);
  }

  @Override
  public void clear() {
    this.deviceToken = null;
    this.person = null;
    this.token = null;
    this.image = null;
    this.date = null;
    setTimeIsSet(false);
    this.time = 0.0;
  }

  public java.lang.String getDeviceToken() {
    return this.deviceToken;
  }

  public TokenObject setDeviceToken(java.lang.String deviceToken) {
    this.deviceToken = deviceToken;
    return this;
  }

  public void unsetDeviceToken() {
    this.deviceToken = null;
  }

  /** Returns true if field deviceToken is set (has been assigned a value) and false otherwise */
  public boolean isSetDeviceToken() {
    return this.deviceToken != null;
  }

  public void setDeviceTokenIsSet(boolean value) {
    if (!value) {
      this.deviceToken = null;
    }
  }

  public java.lang.String getPerson() {
    return this.person;
  }

  public TokenObject setPerson(java.lang.String person) {
    this.person = person;
    return this;
  }

  public void unsetPerson() {
    this.person = null;
  }

  /** Returns true if field person is set (has been assigned a value) and false otherwise */
  public boolean isSetPerson() {
    return this.person != null;
  }

  public void setPersonIsSet(boolean value) {
    if (!value) {
      this.person = null;
    }
  }

  public java.lang.String getToken() {
    return this.token;
  }

  public TokenObject setToken(java.lang.String token) {
    this.token = token;
    return this;
  }

  public void unsetToken() {
    this.token = null;
  }

  /** Returns true if field token is set (has been assigned a value) and false otherwise */
  public boolean isSetToken() {
    return this.token != null;
  }

  public void setTokenIsSet(boolean value) {
    if (!value) {
      this.token = null;
    }
  }

  public byte[] getImage() {
    setImage(org.apache.thrift.TBaseHelper.rightSize(image));
    return image == null ? null : image.array();
  }

  public java.nio.ByteBuffer bufferForImage() {
    return org.apache.thrift.TBaseHelper.copyBinary(image);
  }

  public TokenObject setImage(byte[] image) {
    this.image = image == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(image.clone());
    return this;
  }

  public TokenObject setImage(java.nio.ByteBuffer image) {
    this.image = org.apache.thrift.TBaseHelper.copyBinary(image);
    return this;
  }

  public void unsetImage() {
    this.image = null;
  }

  /** Returns true if field image is set (has been assigned a value) and false otherwise */
  public boolean isSetImage() {
    return this.image != null;
  }

  public void setImageIsSet(boolean value) {
    if (!value) {
      this.image = null;
    }
  }

  public java.lang.String getDate() {
    return this.date;
  }

  public TokenObject setDate(java.lang.String date) {
    this.date = date;
    return this;
  }

  public void unsetDate() {
    this.date = null;
  }

  /** Returns true if field date is set (has been assigned a value) and false otherwise */
  public boolean isSetDate() {
    return this.date != null;
  }

  public void setDateIsSet(boolean value) {
    if (!value) {
      this.date = null;
    }
  }

  public double getTime() {
    return this.time;
  }

  public TokenObject setTime(double time) {
    this.time = time;
    setTimeIsSet(true);
    return this;
  }

  public void unsetTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIME_ISSET_ID);
  }

  /** Returns true if field time is set (has been assigned a value) and false otherwise */
  public boolean isSetTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIME_ISSET_ID);
  }

  public void setTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case DEVICE_TOKEN:
      if (value == null) {
        unsetDeviceToken();
      } else {
        setDeviceToken((java.lang.String)value);
      }
      break;

    case PERSON:
      if (value == null) {
        unsetPerson();
      } else {
        setPerson((java.lang.String)value);
      }
      break;

    case TOKEN:
      if (value == null) {
        unsetToken();
      } else {
        setToken((java.lang.String)value);
      }
      break;

    case IMAGE:
      if (value == null) {
        unsetImage();
      } else {
        if (value instanceof byte[]) {
          setImage((byte[])value);
        } else {
          setImage((java.nio.ByteBuffer)value);
        }
      }
      break;

    case DATE:
      if (value == null) {
        unsetDate();
      } else {
        setDate((java.lang.String)value);
      }
      break;

    case TIME:
      if (value == null) {
        unsetTime();
      } else {
        setTime((java.lang.Double)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case DEVICE_TOKEN:
      return getDeviceToken();

    case PERSON:
      return getPerson();

    case TOKEN:
      return getToken();

    case IMAGE:
      return getImage();

    case DATE:
      return getDate();

    case TIME:
      return getTime();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case DEVICE_TOKEN:
      return isSetDeviceToken();
    case PERSON:
      return isSetPerson();
    case TOKEN:
      return isSetToken();
    case IMAGE:
      return isSetImage();
    case DATE:
      return isSetDate();
    case TIME:
      return isSetTime();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TokenObject)
      return this.equals((TokenObject)that);
    return false;
  }

  public boolean equals(TokenObject that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_deviceToken = true && this.isSetDeviceToken();
    boolean that_present_deviceToken = true && that.isSetDeviceToken();
    if (this_present_deviceToken || that_present_deviceToken) {
      if (!(this_present_deviceToken && that_present_deviceToken))
        return false;
      if (!this.deviceToken.equals(that.deviceToken))
        return false;
    }

    boolean this_present_person = true && this.isSetPerson();
    boolean that_present_person = true && that.isSetPerson();
    if (this_present_person || that_present_person) {
      if (!(this_present_person && that_present_person))
        return false;
      if (!this.person.equals(that.person))
        return false;
    }

    boolean this_present_token = true && this.isSetToken();
    boolean that_present_token = true && that.isSetToken();
    if (this_present_token || that_present_token) {
      if (!(this_present_token && that_present_token))
        return false;
      if (!this.token.equals(that.token))
        return false;
    }

    boolean this_present_image = true && this.isSetImage();
    boolean that_present_image = true && that.isSetImage();
    if (this_present_image || that_present_image) {
      if (!(this_present_image && that_present_image))
        return false;
      if (!this.image.equals(that.image))
        return false;
    }

    boolean this_present_date = true && this.isSetDate();
    boolean that_present_date = true && that.isSetDate();
    if (this_present_date || that_present_date) {
      if (!(this_present_date && that_present_date))
        return false;
      if (!this.date.equals(that.date))
        return false;
    }

    boolean this_present_time = true && this.isSetTime();
    boolean that_present_time = true && that.isSetTime();
    if (this_present_time || that_present_time) {
      if (!(this_present_time && that_present_time))
        return false;
      if (this.time != that.time)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetDeviceToken()) ? 131071 : 524287);
    if (isSetDeviceToken())
      hashCode = hashCode * 8191 + deviceToken.hashCode();

    hashCode = hashCode * 8191 + ((isSetPerson()) ? 131071 : 524287);
    if (isSetPerson())
      hashCode = hashCode * 8191 + person.hashCode();

    hashCode = hashCode * 8191 + ((isSetToken()) ? 131071 : 524287);
    if (isSetToken())
      hashCode = hashCode * 8191 + token.hashCode();

    hashCode = hashCode * 8191 + ((isSetImage()) ? 131071 : 524287);
    if (isSetImage())
      hashCode = hashCode * 8191 + image.hashCode();

    hashCode = hashCode * 8191 + ((isSetDate()) ? 131071 : 524287);
    if (isSetDate())
      hashCode = hashCode * 8191 + date.hashCode();

    hashCode = hashCode * 8191 + ((isSetTime()) ? 131071 : 524287);
    if (isSetTime())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(time);

    return hashCode;
  }

  @Override
  public int compareTo(TokenObject other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetDeviceToken()).compareTo(other.isSetDeviceToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeviceToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceToken, other.deviceToken);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPerson()).compareTo(other.isSetPerson());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPerson()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.person, other.person);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetImage()).compareTo(other.isSetImage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.image, other.image);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDate()).compareTo(other.isSetDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date, other.date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTime()).compareTo(other.isSetTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, other.time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TokenObject(");
    boolean first = true;

    sb.append("deviceToken:");
    if (this.deviceToken == null) {
      sb.append("null");
    } else {
      sb.append(this.deviceToken);
    }
    first = false;
    if (isSetPerson()) {
      if (!first) sb.append(", ");
      sb.append("person:");
      if (this.person == null) {
        sb.append("null");
      } else {
        sb.append(this.person);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("token:");
    if (this.token == null) {
      sb.append("null");
    } else {
      sb.append(this.token);
    }
    first = false;
    if (isSetImage()) {
      if (!first) sb.append(", ");
      sb.append("image:");
      if (this.image == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.image, sb);
      }
      first = false;
    }
    if (isSetDate()) {
      if (!first) sb.append(", ");
      sb.append("date:");
      if (this.date == null) {
        sb.append("null");
      } else {
        sb.append(this.date);
      }
      first = false;
    }
    if (isSetTime()) {
      if (!first) sb.append(", ");
      sb.append("time:");
      sb.append(this.time);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (deviceToken == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'deviceToken' was not present! Struct: " + toString());
    }
    if (token == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'token' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TokenObjectStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TokenObjectStandardScheme getScheme() {
      return new TokenObjectStandardScheme();
    }
  }

  private static class TokenObjectStandardScheme extends org.apache.thrift.scheme.StandardScheme<TokenObject> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TokenObject struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DEVICE_TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deviceToken = iprot.readString();
              struct.setDeviceTokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PERSON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.person = iprot.readString();
              struct.setPersonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.token = iprot.readString();
              struct.setTokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IMAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.image = iprot.readBinary();
              struct.setImageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.date = iprot.readString();
              struct.setDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.time = iprot.readDouble();
              struct.setTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TokenObject struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.deviceToken != null) {
        oprot.writeFieldBegin(DEVICE_TOKEN_FIELD_DESC);
        oprot.writeString(struct.deviceToken);
        oprot.writeFieldEnd();
      }
      if (struct.person != null) {
        if (struct.isSetPerson()) {
          oprot.writeFieldBegin(PERSON_FIELD_DESC);
          oprot.writeString(struct.person);
          oprot.writeFieldEnd();
        }
      }
      if (struct.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeString(struct.token);
        oprot.writeFieldEnd();
      }
      if (struct.image != null) {
        if (struct.isSetImage()) {
          oprot.writeFieldBegin(IMAGE_FIELD_DESC);
          oprot.writeBinary(struct.image);
          oprot.writeFieldEnd();
        }
      }
      if (struct.date != null) {
        if (struct.isSetDate()) {
          oprot.writeFieldBegin(DATE_FIELD_DESC);
          oprot.writeString(struct.date);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTime()) {
        oprot.writeFieldBegin(TIME_FIELD_DESC);
        oprot.writeDouble(struct.time);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TokenObjectTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TokenObjectTupleScheme getScheme() {
      return new TokenObjectTupleScheme();
    }
  }

  private static class TokenObjectTupleScheme extends org.apache.thrift.scheme.TupleScheme<TokenObject> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TokenObject struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.deviceToken);
      oprot.writeString(struct.token);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetPerson()) {
        optionals.set(0);
      }
      if (struct.isSetImage()) {
        optionals.set(1);
      }
      if (struct.isSetDate()) {
        optionals.set(2);
      }
      if (struct.isSetTime()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetPerson()) {
        oprot.writeString(struct.person);
      }
      if (struct.isSetImage()) {
        oprot.writeBinary(struct.image);
      }
      if (struct.isSetDate()) {
        oprot.writeString(struct.date);
      }
      if (struct.isSetTime()) {
        oprot.writeDouble(struct.time);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TokenObject struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.deviceToken = iprot.readString();
      struct.setDeviceTokenIsSet(true);
      struct.token = iprot.readString();
      struct.setTokenIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.person = iprot.readString();
        struct.setPersonIsSet(true);
      }
      if (incoming.get(1)) {
        struct.image = iprot.readBinary();
        struct.setImageIsSet(true);
      }
      if (incoming.get(2)) {
        struct.date = iprot.readString();
        struct.setDateIsSet(true);
      }
      if (incoming.get(3)) {
        struct.time = iprot.readDouble();
        struct.setTimeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

