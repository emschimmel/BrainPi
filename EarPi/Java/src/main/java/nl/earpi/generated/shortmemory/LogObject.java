/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package nl.earpi.generated.shortmemory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-01-01")
public class LogObject implements org.apache.thrift.TBase<LogObject, LogObject._Fields>, java.io.Serializable, Cloneable, Comparable<LogObject> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LogObject");

  private static final org.apache.thrift.protocol.TField ACTION_FIELD_DESC = new org.apache.thrift.protocol.TField("action", org.apache.thrift.protocol.TType.MAP, (short)1);
  private static final org.apache.thrift.protocol.TField SERVICE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ENDPOINT_FIELD_DESC = new org.apache.thrift.protocol.TField("endpoint", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PERSON_FIELD_DESC = new org.apache.thrift.protocol.TField("person", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField DEVICE_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceToken", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("date", org.apache.thrift.protocol.TType.STRING, (short)7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new LogObjectStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new LogObjectTupleSchemeFactory();

  public java.util.Map<nl.earpi.generated.genericstruct.ActionEnum,java.nio.ByteBuffer> action; // required
  public java.lang.String serviceName; // required
  public java.lang.String message; // required
  public java.lang.String endpoint; // optional
  public java.lang.String person; // optional
  public java.lang.String deviceToken; // optional
  public java.lang.String date; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ACTION((short)1, "action"),
    SERVICE_NAME((short)2, "serviceName"),
    MESSAGE((short)3, "message"),
    ENDPOINT((short)4, "endpoint"),
    PERSON((short)5, "person"),
    DEVICE_TOKEN((short)6, "deviceToken"),
    DATE((short)7, "date");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ACTION
          return ACTION;
        case 2: // SERVICE_NAME
          return SERVICE_NAME;
        case 3: // MESSAGE
          return MESSAGE;
        case 4: // ENDPOINT
          return ENDPOINT;
        case 5: // PERSON
          return PERSON;
        case 6: // DEVICE_TOKEN
          return DEVICE_TOKEN;
        case 7: // DATE
          return DATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.ENDPOINT,_Fields.PERSON,_Fields.DEVICE_TOKEN,_Fields.DATE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ACTION, new org.apache.thrift.meta_data.FieldMetaData("action", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, nl.earpi.generated.genericstruct.ActionEnum.class), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    tmpMap.put(_Fields.SERVICE_NAME, new org.apache.thrift.meta_data.FieldMetaData("serviceName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ENDPOINT, new org.apache.thrift.meta_data.FieldMetaData("endpoint", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PERSON, new org.apache.thrift.meta_data.FieldMetaData("person", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEVICE_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("deviceToken", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATE, new org.apache.thrift.meta_data.FieldMetaData("date", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LogObject.class, metaDataMap);
  }

  public LogObject() {
  }

  public LogObject(
    java.util.Map<nl.earpi.generated.genericstruct.ActionEnum,java.nio.ByteBuffer> action,
    java.lang.String serviceName,
    java.lang.String message)
  {
    this();
    this.action = action;
    this.serviceName = serviceName;
    this.message = message;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LogObject(LogObject other) {
    if (other.isSetAction()) {
      java.util.Map<nl.earpi.generated.genericstruct.ActionEnum,java.nio.ByteBuffer> __this__action = new java.util.HashMap<nl.earpi.generated.genericstruct.ActionEnum,java.nio.ByteBuffer>(other.action.size());
      for (java.util.Map.Entry<nl.earpi.generated.genericstruct.ActionEnum, java.nio.ByteBuffer> other_element : other.action.entrySet()) {

        nl.earpi.generated.genericstruct.ActionEnum other_element_key = other_element.getKey();
        java.nio.ByteBuffer other_element_value = other_element.getValue();

        nl.earpi.generated.genericstruct.ActionEnum __this__action_copy_key = other_element_key;

        java.nio.ByteBuffer __this__action_copy_value = org.apache.thrift.TBaseHelper.copyBinary(other_element_value);

        __this__action.put(__this__action_copy_key, __this__action_copy_value);
      }
      this.action = __this__action;
    }
    if (other.isSetServiceName()) {
      this.serviceName = other.serviceName;
    }
    if (other.isSetMessage()) {
      this.message = other.message;
    }
    if (other.isSetEndpoint()) {
      this.endpoint = other.endpoint;
    }
    if (other.isSetPerson()) {
      this.person = other.person;
    }
    if (other.isSetDeviceToken()) {
      this.deviceToken = other.deviceToken;
    }
    if (other.isSetDate()) {
      this.date = other.date;
    }
  }

  public LogObject deepCopy() {
    return new LogObject(this);
  }

  @Override
  public void clear() {
    this.action = null;
    this.serviceName = null;
    this.message = null;
    this.endpoint = null;
    this.person = null;
    this.deviceToken = null;
    this.date = null;
  }

  public int getActionSize() {
    return (this.action == null) ? 0 : this.action.size();
  }

  public void putToAction(nl.earpi.generated.genericstruct.ActionEnum key, java.nio.ByteBuffer val) {
    if (this.action == null) {
      this.action = new java.util.HashMap<nl.earpi.generated.genericstruct.ActionEnum,java.nio.ByteBuffer>();
    }
    this.action.put(key, val);
  }

  public java.util.Map<nl.earpi.generated.genericstruct.ActionEnum,java.nio.ByteBuffer> getAction() {
    return this.action;
  }

  public LogObject setAction(java.util.Map<nl.earpi.generated.genericstruct.ActionEnum,java.nio.ByteBuffer> action) {
    this.action = action;
    return this;
  }

  public void unsetAction() {
    this.action = null;
  }

  /** Returns true if field action is set (has been assigned a value) and false otherwise */
  public boolean isSetAction() {
    return this.action != null;
  }

  public void setActionIsSet(boolean value) {
    if (!value) {
      this.action = null;
    }
  }

  public java.lang.String getServiceName() {
    return this.serviceName;
  }

  public LogObject setServiceName(java.lang.String serviceName) {
    this.serviceName = serviceName;
    return this;
  }

  public void unsetServiceName() {
    this.serviceName = null;
  }

  /** Returns true if field serviceName is set (has been assigned a value) and false otherwise */
  public boolean isSetServiceName() {
    return this.serviceName != null;
  }

  public void setServiceNameIsSet(boolean value) {
    if (!value) {
      this.serviceName = null;
    }
  }

  public java.lang.String getMessage() {
    return this.message;
  }

  public LogObject setMessage(java.lang.String message) {
    this.message = message;
    return this;
  }

  public void unsetMessage() {
    this.message = null;
  }

  /** Returns true if field message is set (has been assigned a value) and false otherwise */
  public boolean isSetMessage() {
    return this.message != null;
  }

  public void setMessageIsSet(boolean value) {
    if (!value) {
      this.message = null;
    }
  }

  public java.lang.String getEndpoint() {
    return this.endpoint;
  }

  public LogObject setEndpoint(java.lang.String endpoint) {
    this.endpoint = endpoint;
    return this;
  }

  public void unsetEndpoint() {
    this.endpoint = null;
  }

  /** Returns true if field endpoint is set (has been assigned a value) and false otherwise */
  public boolean isSetEndpoint() {
    return this.endpoint != null;
  }

  public void setEndpointIsSet(boolean value) {
    if (!value) {
      this.endpoint = null;
    }
  }

  public java.lang.String getPerson() {
    return this.person;
  }

  public LogObject setPerson(java.lang.String person) {
    this.person = person;
    return this;
  }

  public void unsetPerson() {
    this.person = null;
  }

  /** Returns true if field person is set (has been assigned a value) and false otherwise */
  public boolean isSetPerson() {
    return this.person != null;
  }

  public void setPersonIsSet(boolean value) {
    if (!value) {
      this.person = null;
    }
  }

  public java.lang.String getDeviceToken() {
    return this.deviceToken;
  }

  public LogObject setDeviceToken(java.lang.String deviceToken) {
    this.deviceToken = deviceToken;
    return this;
  }

  public void unsetDeviceToken() {
    this.deviceToken = null;
  }

  /** Returns true if field deviceToken is set (has been assigned a value) and false otherwise */
  public boolean isSetDeviceToken() {
    return this.deviceToken != null;
  }

  public void setDeviceTokenIsSet(boolean value) {
    if (!value) {
      this.deviceToken = null;
    }
  }

  public java.lang.String getDate() {
    return this.date;
  }

  public LogObject setDate(java.lang.String date) {
    this.date = date;
    return this;
  }

  public void unsetDate() {
    this.date = null;
  }

  /** Returns true if field date is set (has been assigned a value) and false otherwise */
  public boolean isSetDate() {
    return this.date != null;
  }

  public void setDateIsSet(boolean value) {
    if (!value) {
      this.date = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ACTION:
      if (value == null) {
        unsetAction();
      } else {
        setAction((java.util.Map<nl.earpi.generated.genericstruct.ActionEnum,java.nio.ByteBuffer>)value);
      }
      break;

    case SERVICE_NAME:
      if (value == null) {
        unsetServiceName();
      } else {
        setServiceName((java.lang.String)value);
      }
      break;

    case MESSAGE:
      if (value == null) {
        unsetMessage();
      } else {
        setMessage((java.lang.String)value);
      }
      break;

    case ENDPOINT:
      if (value == null) {
        unsetEndpoint();
      } else {
        setEndpoint((java.lang.String)value);
      }
      break;

    case PERSON:
      if (value == null) {
        unsetPerson();
      } else {
        setPerson((java.lang.String)value);
      }
      break;

    case DEVICE_TOKEN:
      if (value == null) {
        unsetDeviceToken();
      } else {
        setDeviceToken((java.lang.String)value);
      }
      break;

    case DATE:
      if (value == null) {
        unsetDate();
      } else {
        setDate((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ACTION:
      return getAction();

    case SERVICE_NAME:
      return getServiceName();

    case MESSAGE:
      return getMessage();

    case ENDPOINT:
      return getEndpoint();

    case PERSON:
      return getPerson();

    case DEVICE_TOKEN:
      return getDeviceToken();

    case DATE:
      return getDate();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ACTION:
      return isSetAction();
    case SERVICE_NAME:
      return isSetServiceName();
    case MESSAGE:
      return isSetMessage();
    case ENDPOINT:
      return isSetEndpoint();
    case PERSON:
      return isSetPerson();
    case DEVICE_TOKEN:
      return isSetDeviceToken();
    case DATE:
      return isSetDate();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof LogObject)
      return this.equals((LogObject)that);
    return false;
  }

  public boolean equals(LogObject that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_action = true && this.isSetAction();
    boolean that_present_action = true && that.isSetAction();
    if (this_present_action || that_present_action) {
      if (!(this_present_action && that_present_action))
        return false;
      if (!this.action.equals(that.action))
        return false;
    }

    boolean this_present_serviceName = true && this.isSetServiceName();
    boolean that_present_serviceName = true && that.isSetServiceName();
    if (this_present_serviceName || that_present_serviceName) {
      if (!(this_present_serviceName && that_present_serviceName))
        return false;
      if (!this.serviceName.equals(that.serviceName))
        return false;
    }

    boolean this_present_message = true && this.isSetMessage();
    boolean that_present_message = true && that.isSetMessage();
    if (this_present_message || that_present_message) {
      if (!(this_present_message && that_present_message))
        return false;
      if (!this.message.equals(that.message))
        return false;
    }

    boolean this_present_endpoint = true && this.isSetEndpoint();
    boolean that_present_endpoint = true && that.isSetEndpoint();
    if (this_present_endpoint || that_present_endpoint) {
      if (!(this_present_endpoint && that_present_endpoint))
        return false;
      if (!this.endpoint.equals(that.endpoint))
        return false;
    }

    boolean this_present_person = true && this.isSetPerson();
    boolean that_present_person = true && that.isSetPerson();
    if (this_present_person || that_present_person) {
      if (!(this_present_person && that_present_person))
        return false;
      if (!this.person.equals(that.person))
        return false;
    }

    boolean this_present_deviceToken = true && this.isSetDeviceToken();
    boolean that_present_deviceToken = true && that.isSetDeviceToken();
    if (this_present_deviceToken || that_present_deviceToken) {
      if (!(this_present_deviceToken && that_present_deviceToken))
        return false;
      if (!this.deviceToken.equals(that.deviceToken))
        return false;
    }

    boolean this_present_date = true && this.isSetDate();
    boolean that_present_date = true && that.isSetDate();
    if (this_present_date || that_present_date) {
      if (!(this_present_date && that_present_date))
        return false;
      if (!this.date.equals(that.date))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetAction()) ? 131071 : 524287);
    if (isSetAction())
      hashCode = hashCode * 8191 + action.hashCode();

    hashCode = hashCode * 8191 + ((isSetServiceName()) ? 131071 : 524287);
    if (isSetServiceName())
      hashCode = hashCode * 8191 + serviceName.hashCode();

    hashCode = hashCode * 8191 + ((isSetMessage()) ? 131071 : 524287);
    if (isSetMessage())
      hashCode = hashCode * 8191 + message.hashCode();

    hashCode = hashCode * 8191 + ((isSetEndpoint()) ? 131071 : 524287);
    if (isSetEndpoint())
      hashCode = hashCode * 8191 + endpoint.hashCode();

    hashCode = hashCode * 8191 + ((isSetPerson()) ? 131071 : 524287);
    if (isSetPerson())
      hashCode = hashCode * 8191 + person.hashCode();

    hashCode = hashCode * 8191 + ((isSetDeviceToken()) ? 131071 : 524287);
    if (isSetDeviceToken())
      hashCode = hashCode * 8191 + deviceToken.hashCode();

    hashCode = hashCode * 8191 + ((isSetDate()) ? 131071 : 524287);
    if (isSetDate())
      hashCode = hashCode * 8191 + date.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(LogObject other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetAction()).compareTo(other.isSetAction());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAction()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.action, other.action);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetServiceName()).compareTo(other.isSetServiceName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServiceName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceName, other.serviceName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMessage()).compareTo(other.isSetMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, other.message);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEndpoint()).compareTo(other.isSetEndpoint());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndpoint()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endpoint, other.endpoint);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPerson()).compareTo(other.isSetPerson());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPerson()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.person, other.person);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDeviceToken()).compareTo(other.isSetDeviceToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeviceToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceToken, other.deviceToken);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDate()).compareTo(other.isSetDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date, other.date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("LogObject(");
    boolean first = true;

    sb.append("action:");
    if (this.action == null) {
      sb.append("null");
    } else {
      sb.append(this.action);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("serviceName:");
    if (this.serviceName == null) {
      sb.append("null");
    } else {
      sb.append(this.serviceName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("message:");
    if (this.message == null) {
      sb.append("null");
    } else {
      sb.append(this.message);
    }
    first = false;
    if (isSetEndpoint()) {
      if (!first) sb.append(", ");
      sb.append("endpoint:");
      if (this.endpoint == null) {
        sb.append("null");
      } else {
        sb.append(this.endpoint);
      }
      first = false;
    }
    if (isSetPerson()) {
      if (!first) sb.append(", ");
      sb.append("person:");
      if (this.person == null) {
        sb.append("null");
      } else {
        sb.append(this.person);
      }
      first = false;
    }
    if (isSetDeviceToken()) {
      if (!first) sb.append(", ");
      sb.append("deviceToken:");
      if (this.deviceToken == null) {
        sb.append("null");
      } else {
        sb.append(this.deviceToken);
      }
      first = false;
    }
    if (isSetDate()) {
      if (!first) sb.append(", ");
      sb.append("date:");
      if (this.date == null) {
        sb.append("null");
      } else {
        sb.append(this.date);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (action == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'action' was not present! Struct: " + toString());
    }
    if (serviceName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'serviceName' was not present! Struct: " + toString());
    }
    if (message == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'message' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LogObjectStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public LogObjectStandardScheme getScheme() {
      return new LogObjectStandardScheme();
    }
  }

  private static class LogObjectStandardScheme extends org.apache.thrift.scheme.StandardScheme<LogObject> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LogObject struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ACTION
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.action = new java.util.HashMap<nl.earpi.generated.genericstruct.ActionEnum,java.nio.ByteBuffer>(2*_map0.size);
                nl.earpi.generated.genericstruct.ActionEnum _key1;
                java.nio.ByteBuffer _val2;
                for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                {
                  _key1 = nl.earpi.generated.genericstruct.ActionEnum.findByValue(iprot.readI32());
                  _val2 = iprot.readBinary();
                  struct.action.put(_key1, _val2);
                }
                iprot.readMapEnd();
              }
              struct.setActionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SERVICE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.serviceName = iprot.readString();
              struct.setServiceNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.message = iprot.readString();
              struct.setMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ENDPOINT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.endpoint = iprot.readString();
              struct.setEndpointIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PERSON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.person = iprot.readString();
              struct.setPersonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DEVICE_TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deviceToken = iprot.readString();
              struct.setDeviceTokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.date = iprot.readString();
              struct.setDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LogObject struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.action != null) {
        oprot.writeFieldBegin(ACTION_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, struct.action.size()));
          for (java.util.Map.Entry<nl.earpi.generated.genericstruct.ActionEnum, java.nio.ByteBuffer> _iter4 : struct.action.entrySet())
          {
            oprot.writeI32(_iter4.getKey().getValue());
            oprot.writeBinary(_iter4.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.serviceName != null) {
        oprot.writeFieldBegin(SERVICE_NAME_FIELD_DESC);
        oprot.writeString(struct.serviceName);
        oprot.writeFieldEnd();
      }
      if (struct.message != null) {
        oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
        oprot.writeString(struct.message);
        oprot.writeFieldEnd();
      }
      if (struct.endpoint != null) {
        if (struct.isSetEndpoint()) {
          oprot.writeFieldBegin(ENDPOINT_FIELD_DESC);
          oprot.writeString(struct.endpoint);
          oprot.writeFieldEnd();
        }
      }
      if (struct.person != null) {
        if (struct.isSetPerson()) {
          oprot.writeFieldBegin(PERSON_FIELD_DESC);
          oprot.writeString(struct.person);
          oprot.writeFieldEnd();
        }
      }
      if (struct.deviceToken != null) {
        if (struct.isSetDeviceToken()) {
          oprot.writeFieldBegin(DEVICE_TOKEN_FIELD_DESC);
          oprot.writeString(struct.deviceToken);
          oprot.writeFieldEnd();
        }
      }
      if (struct.date != null) {
        if (struct.isSetDate()) {
          oprot.writeFieldBegin(DATE_FIELD_DESC);
          oprot.writeString(struct.date);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LogObjectTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public LogObjectTupleScheme getScheme() {
      return new LogObjectTupleScheme();
    }
  }

  private static class LogObjectTupleScheme extends org.apache.thrift.scheme.TupleScheme<LogObject> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LogObject struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      {
        oprot.writeI32(struct.action.size());
        for (java.util.Map.Entry<nl.earpi.generated.genericstruct.ActionEnum, java.nio.ByteBuffer> _iter5 : struct.action.entrySet())
        {
          oprot.writeI32(_iter5.getKey().getValue());
          oprot.writeBinary(_iter5.getValue());
        }
      }
      oprot.writeString(struct.serviceName);
      oprot.writeString(struct.message);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetEndpoint()) {
        optionals.set(0);
      }
      if (struct.isSetPerson()) {
        optionals.set(1);
      }
      if (struct.isSetDeviceToken()) {
        optionals.set(2);
      }
      if (struct.isSetDate()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetEndpoint()) {
        oprot.writeString(struct.endpoint);
      }
      if (struct.isSetPerson()) {
        oprot.writeString(struct.person);
      }
      if (struct.isSetDeviceToken()) {
        oprot.writeString(struct.deviceToken);
      }
      if (struct.isSetDate()) {
        oprot.writeString(struct.date);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LogObject struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.action = new java.util.HashMap<nl.earpi.generated.genericstruct.ActionEnum,java.nio.ByteBuffer>(2*_map6.size);
        nl.earpi.generated.genericstruct.ActionEnum _key7;
        java.nio.ByteBuffer _val8;
        for (int _i9 = 0; _i9 < _map6.size; ++_i9)
        {
          _key7 = nl.earpi.generated.genericstruct.ActionEnum.findByValue(iprot.readI32());
          _val8 = iprot.readBinary();
          struct.action.put(_key7, _val8);
        }
      }
      struct.setActionIsSet(true);
      struct.serviceName = iprot.readString();
      struct.setServiceNameIsSet(true);
      struct.message = iprot.readString();
      struct.setMessageIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.endpoint = iprot.readString();
        struct.setEndpointIsSet(true);
      }
      if (incoming.get(1)) {
        struct.person = iprot.readString();
        struct.setPersonIsSet(true);
      }
      if (incoming.get(2)) {
        struct.deviceToken = iprot.readString();
        struct.setDeviceTokenIsSet(true);
      }
      if (incoming.get(3)) {
        struct.date = iprot.readString();
        struct.setDateIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

