/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package nl.earpi.generated.earpi;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-01-01")
public class EarPiService {

  public interface Iface {

    public UserListOutput getUserList(EarPiAuthObject tokenInput) throws nl.earpi.generated.exception.LoginFailedException, org.apache.thrift.TException;

    public java.lang.String changeUser(java.lang.String field, nl.earpi.generated.autorisationstruct.Person person, EarPiAuthObject tokenInput) throws nl.earpi.generated.exception.LoginFailedException, org.apache.thrift.TException;

    public java.lang.String configureUser(java.util.List<nl.earpi.generated.autorisationstruct.Person> userList, EarPiAuthObject tokenInput) throws nl.earpi.generated.exception.LoginFailedException, org.apache.thrift.TException;

    public java.lang.String configureUserModule(java.lang.String uniquename, java.util.Map<nl.earpi.generated.genericstruct.ActionEnum,nl.earpi.generated.autorisationstruct.Autorisation> autorisations, EarPiAuthObject tokenInput) throws nl.earpi.generated.exception.LoginFailedException, org.apache.thrift.TException;

    public java.lang.String configureModuleSettings(java.lang.String uniquename, nl.earpi.generated.genericstruct.ActionEnum action, java.nio.ByteBuffer module_config, EarPiAuthObject tokenInput) throws nl.earpi.generated.exception.LoginFailedException, org.apache.thrift.TException;

    public DeviceListOutput getDeviceList(EarPiAuthObject tokenInput) throws nl.earpi.generated.exception.LoginFailedException, org.apache.thrift.TException;

    public java.lang.String confirmDevice(java.lang.String deviceToken, boolean active, EarPiAuthObject tokenInput) throws nl.earpi.generated.exception.LoginFailedException, org.apache.thrift.TException;

    public java.lang.String changePassword(java.lang.String username, java.lang.String password, EarPiAuthObject tokenInput) throws nl.earpi.generated.exception.BadHashException, nl.earpi.generated.exception.LoginFailedException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getUserList(EarPiAuthObject tokenInput, org.apache.thrift.async.AsyncMethodCallback<UserListOutput> resultHandler) throws org.apache.thrift.TException;

    public void changeUser(java.lang.String field, nl.earpi.generated.autorisationstruct.Person person, EarPiAuthObject tokenInput, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void configureUser(java.util.List<nl.earpi.generated.autorisationstruct.Person> userList, EarPiAuthObject tokenInput, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void configureUserModule(java.lang.String uniquename, java.util.Map<nl.earpi.generated.genericstruct.ActionEnum,nl.earpi.generated.autorisationstruct.Autorisation> autorisations, EarPiAuthObject tokenInput, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void configureModuleSettings(java.lang.String uniquename, nl.earpi.generated.genericstruct.ActionEnum action, java.nio.ByteBuffer module_config, EarPiAuthObject tokenInput, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void getDeviceList(EarPiAuthObject tokenInput, org.apache.thrift.async.AsyncMethodCallback<DeviceListOutput> resultHandler) throws org.apache.thrift.TException;

    public void confirmDevice(java.lang.String deviceToken, boolean active, EarPiAuthObject tokenInput, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void changePassword(java.lang.String username, java.lang.String password, EarPiAuthObject tokenInput, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public UserListOutput getUserList(EarPiAuthObject tokenInput) throws nl.earpi.generated.exception.LoginFailedException, org.apache.thrift.TException
    {
      send_getUserList(tokenInput);
      return recv_getUserList();
    }

    public void send_getUserList(EarPiAuthObject tokenInput) throws org.apache.thrift.TException
    {
      getUserList_args args = new getUserList_args();
      args.setTokenInput(tokenInput);
      sendBase("getUserList", args);
    }

    public UserListOutput recv_getUserList() throws nl.earpi.generated.exception.LoginFailedException, org.apache.thrift.TException
    {
      getUserList_result result = new getUserList_result();
      receiveBase(result, "getUserList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.fail != null) {
        throw result.fail;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getUserList failed: unknown result");
    }

    public java.lang.String changeUser(java.lang.String field, nl.earpi.generated.autorisationstruct.Person person, EarPiAuthObject tokenInput) throws nl.earpi.generated.exception.LoginFailedException, org.apache.thrift.TException
    {
      send_changeUser(field, person, tokenInput);
      return recv_changeUser();
    }

    public void send_changeUser(java.lang.String field, nl.earpi.generated.autorisationstruct.Person person, EarPiAuthObject tokenInput) throws org.apache.thrift.TException
    {
      changeUser_args args = new changeUser_args();
      args.setField(field);
      args.setPerson(person);
      args.setTokenInput(tokenInput);
      sendBase("changeUser", args);
    }

    public java.lang.String recv_changeUser() throws nl.earpi.generated.exception.LoginFailedException, org.apache.thrift.TException
    {
      changeUser_result result = new changeUser_result();
      receiveBase(result, "changeUser");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.fail != null) {
        throw result.fail;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "changeUser failed: unknown result");
    }

    public java.lang.String configureUser(java.util.List<nl.earpi.generated.autorisationstruct.Person> userList, EarPiAuthObject tokenInput) throws nl.earpi.generated.exception.LoginFailedException, org.apache.thrift.TException
    {
      send_configureUser(userList, tokenInput);
      return recv_configureUser();
    }

    public void send_configureUser(java.util.List<nl.earpi.generated.autorisationstruct.Person> userList, EarPiAuthObject tokenInput) throws org.apache.thrift.TException
    {
      configureUser_args args = new configureUser_args();
      args.setUserList(userList);
      args.setTokenInput(tokenInput);
      sendBase("configureUser", args);
    }

    public java.lang.String recv_configureUser() throws nl.earpi.generated.exception.LoginFailedException, org.apache.thrift.TException
    {
      configureUser_result result = new configureUser_result();
      receiveBase(result, "configureUser");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.fail != null) {
        throw result.fail;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "configureUser failed: unknown result");
    }

    public java.lang.String configureUserModule(java.lang.String uniquename, java.util.Map<nl.earpi.generated.genericstruct.ActionEnum,nl.earpi.generated.autorisationstruct.Autorisation> autorisations, EarPiAuthObject tokenInput) throws nl.earpi.generated.exception.LoginFailedException, org.apache.thrift.TException
    {
      send_configureUserModule(uniquename, autorisations, tokenInput);
      return recv_configureUserModule();
    }

    public void send_configureUserModule(java.lang.String uniquename, java.util.Map<nl.earpi.generated.genericstruct.ActionEnum,nl.earpi.generated.autorisationstruct.Autorisation> autorisations, EarPiAuthObject tokenInput) throws org.apache.thrift.TException
    {
      configureUserModule_args args = new configureUserModule_args();
      args.setUniquename(uniquename);
      args.setAutorisations(autorisations);
      args.setTokenInput(tokenInput);
      sendBase("configureUserModule", args);
    }

    public java.lang.String recv_configureUserModule() throws nl.earpi.generated.exception.LoginFailedException, org.apache.thrift.TException
    {
      configureUserModule_result result = new configureUserModule_result();
      receiveBase(result, "configureUserModule");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.fail != null) {
        throw result.fail;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "configureUserModule failed: unknown result");
    }

    public java.lang.String configureModuleSettings(java.lang.String uniquename, nl.earpi.generated.genericstruct.ActionEnum action, java.nio.ByteBuffer module_config, EarPiAuthObject tokenInput) throws nl.earpi.generated.exception.LoginFailedException, org.apache.thrift.TException
    {
      send_configureModuleSettings(uniquename, action, module_config, tokenInput);
      return recv_configureModuleSettings();
    }

    public void send_configureModuleSettings(java.lang.String uniquename, nl.earpi.generated.genericstruct.ActionEnum action, java.nio.ByteBuffer module_config, EarPiAuthObject tokenInput) throws org.apache.thrift.TException
    {
      configureModuleSettings_args args = new configureModuleSettings_args();
      args.setUniquename(uniquename);
      args.setAction(action);
      args.setModule_config(module_config);
      args.setTokenInput(tokenInput);
      sendBase("configureModuleSettings", args);
    }

    public java.lang.String recv_configureModuleSettings() throws nl.earpi.generated.exception.LoginFailedException, org.apache.thrift.TException
    {
      configureModuleSettings_result result = new configureModuleSettings_result();
      receiveBase(result, "configureModuleSettings");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.fail != null) {
        throw result.fail;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "configureModuleSettings failed: unknown result");
    }

    public DeviceListOutput getDeviceList(EarPiAuthObject tokenInput) throws nl.earpi.generated.exception.LoginFailedException, org.apache.thrift.TException
    {
      send_getDeviceList(tokenInput);
      return recv_getDeviceList();
    }

    public void send_getDeviceList(EarPiAuthObject tokenInput) throws org.apache.thrift.TException
    {
      getDeviceList_args args = new getDeviceList_args();
      args.setTokenInput(tokenInput);
      sendBase("getDeviceList", args);
    }

    public DeviceListOutput recv_getDeviceList() throws nl.earpi.generated.exception.LoginFailedException, org.apache.thrift.TException
    {
      getDeviceList_result result = new getDeviceList_result();
      receiveBase(result, "getDeviceList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.fail != null) {
        throw result.fail;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDeviceList failed: unknown result");
    }

    public java.lang.String confirmDevice(java.lang.String deviceToken, boolean active, EarPiAuthObject tokenInput) throws nl.earpi.generated.exception.LoginFailedException, org.apache.thrift.TException
    {
      send_confirmDevice(deviceToken, active, tokenInput);
      return recv_confirmDevice();
    }

    public void send_confirmDevice(java.lang.String deviceToken, boolean active, EarPiAuthObject tokenInput) throws org.apache.thrift.TException
    {
      confirmDevice_args args = new confirmDevice_args();
      args.setDeviceToken(deviceToken);
      args.setActive(active);
      args.setTokenInput(tokenInput);
      sendBase("confirmDevice", args);
    }

    public java.lang.String recv_confirmDevice() throws nl.earpi.generated.exception.LoginFailedException, org.apache.thrift.TException
    {
      confirmDevice_result result = new confirmDevice_result();
      receiveBase(result, "confirmDevice");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.fail != null) {
        throw result.fail;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "confirmDevice failed: unknown result");
    }

    public java.lang.String changePassword(java.lang.String username, java.lang.String password, EarPiAuthObject tokenInput) throws nl.earpi.generated.exception.BadHashException, nl.earpi.generated.exception.LoginFailedException, org.apache.thrift.TException
    {
      send_changePassword(username, password, tokenInput);
      return recv_changePassword();
    }

    public void send_changePassword(java.lang.String username, java.lang.String password, EarPiAuthObject tokenInput) throws org.apache.thrift.TException
    {
      changePassword_args args = new changePassword_args();
      args.setUsername(username);
      args.setPassword(password);
      args.setTokenInput(tokenInput);
      sendBase("changePassword", args);
    }

    public java.lang.String recv_changePassword() throws nl.earpi.generated.exception.BadHashException, nl.earpi.generated.exception.LoginFailedException, org.apache.thrift.TException
    {
      changePassword_result result = new changePassword_result();
      receiveBase(result, "changePassword");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.bad != null) {
        throw result.bad;
      }
      if (result.fail != null) {
        throw result.fail;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "changePassword failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getUserList(EarPiAuthObject tokenInput, org.apache.thrift.async.AsyncMethodCallback<UserListOutput> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getUserList_call method_call = new getUserList_call(tokenInput, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getUserList_call extends org.apache.thrift.async.TAsyncMethodCall<UserListOutput> {
      private EarPiAuthObject tokenInput;
      public getUserList_call(EarPiAuthObject tokenInput, org.apache.thrift.async.AsyncMethodCallback<UserListOutput> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tokenInput = tokenInput;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUserList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getUserList_args args = new getUserList_args();
        args.setTokenInput(tokenInput);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public UserListOutput getResult() throws nl.earpi.generated.exception.LoginFailedException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getUserList();
      }
    }

    public void changeUser(java.lang.String field, nl.earpi.generated.autorisationstruct.Person person, EarPiAuthObject tokenInput, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      changeUser_call method_call = new changeUser_call(field, person, tokenInput, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class changeUser_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String field;
      private nl.earpi.generated.autorisationstruct.Person person;
      private EarPiAuthObject tokenInput;
      public changeUser_call(java.lang.String field, nl.earpi.generated.autorisationstruct.Person person, EarPiAuthObject tokenInput, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.field = field;
        this.person = person;
        this.tokenInput = tokenInput;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("changeUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        changeUser_args args = new changeUser_args();
        args.setField(field);
        args.setPerson(person);
        args.setTokenInput(tokenInput);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws nl.earpi.generated.exception.LoginFailedException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_changeUser();
      }
    }

    public void configureUser(java.util.List<nl.earpi.generated.autorisationstruct.Person> userList, EarPiAuthObject tokenInput, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      configureUser_call method_call = new configureUser_call(userList, tokenInput, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class configureUser_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.util.List<nl.earpi.generated.autorisationstruct.Person> userList;
      private EarPiAuthObject tokenInput;
      public configureUser_call(java.util.List<nl.earpi.generated.autorisationstruct.Person> userList, EarPiAuthObject tokenInput, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userList = userList;
        this.tokenInput = tokenInput;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("configureUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        configureUser_args args = new configureUser_args();
        args.setUserList(userList);
        args.setTokenInput(tokenInput);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws nl.earpi.generated.exception.LoginFailedException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_configureUser();
      }
    }

    public void configureUserModule(java.lang.String uniquename, java.util.Map<nl.earpi.generated.genericstruct.ActionEnum,nl.earpi.generated.autorisationstruct.Autorisation> autorisations, EarPiAuthObject tokenInput, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      configureUserModule_call method_call = new configureUserModule_call(uniquename, autorisations, tokenInput, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class configureUserModule_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String uniquename;
      private java.util.Map<nl.earpi.generated.genericstruct.ActionEnum,nl.earpi.generated.autorisationstruct.Autorisation> autorisations;
      private EarPiAuthObject tokenInput;
      public configureUserModule_call(java.lang.String uniquename, java.util.Map<nl.earpi.generated.genericstruct.ActionEnum,nl.earpi.generated.autorisationstruct.Autorisation> autorisations, EarPiAuthObject tokenInput, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uniquename = uniquename;
        this.autorisations = autorisations;
        this.tokenInput = tokenInput;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("configureUserModule", org.apache.thrift.protocol.TMessageType.CALL, 0));
        configureUserModule_args args = new configureUserModule_args();
        args.setUniquename(uniquename);
        args.setAutorisations(autorisations);
        args.setTokenInput(tokenInput);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws nl.earpi.generated.exception.LoginFailedException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_configureUserModule();
      }
    }

    public void configureModuleSettings(java.lang.String uniquename, nl.earpi.generated.genericstruct.ActionEnum action, java.nio.ByteBuffer module_config, EarPiAuthObject tokenInput, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      configureModuleSettings_call method_call = new configureModuleSettings_call(uniquename, action, module_config, tokenInput, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class configureModuleSettings_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String uniquename;
      private nl.earpi.generated.genericstruct.ActionEnum action;
      private java.nio.ByteBuffer module_config;
      private EarPiAuthObject tokenInput;
      public configureModuleSettings_call(java.lang.String uniquename, nl.earpi.generated.genericstruct.ActionEnum action, java.nio.ByteBuffer module_config, EarPiAuthObject tokenInput, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uniquename = uniquename;
        this.action = action;
        this.module_config = module_config;
        this.tokenInput = tokenInput;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("configureModuleSettings", org.apache.thrift.protocol.TMessageType.CALL, 0));
        configureModuleSettings_args args = new configureModuleSettings_args();
        args.setUniquename(uniquename);
        args.setAction(action);
        args.setModule_config(module_config);
        args.setTokenInput(tokenInput);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws nl.earpi.generated.exception.LoginFailedException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_configureModuleSettings();
      }
    }

    public void getDeviceList(EarPiAuthObject tokenInput, org.apache.thrift.async.AsyncMethodCallback<DeviceListOutput> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getDeviceList_call method_call = new getDeviceList_call(tokenInput, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getDeviceList_call extends org.apache.thrift.async.TAsyncMethodCall<DeviceListOutput> {
      private EarPiAuthObject tokenInput;
      public getDeviceList_call(EarPiAuthObject tokenInput, org.apache.thrift.async.AsyncMethodCallback<DeviceListOutput> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tokenInput = tokenInput;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDeviceList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getDeviceList_args args = new getDeviceList_args();
        args.setTokenInput(tokenInput);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public DeviceListOutput getResult() throws nl.earpi.generated.exception.LoginFailedException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDeviceList();
      }
    }

    public void confirmDevice(java.lang.String deviceToken, boolean active, EarPiAuthObject tokenInput, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      confirmDevice_call method_call = new confirmDevice_call(deviceToken, active, tokenInput, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class confirmDevice_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String deviceToken;
      private boolean active;
      private EarPiAuthObject tokenInput;
      public confirmDevice_call(java.lang.String deviceToken, boolean active, EarPiAuthObject tokenInput, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.deviceToken = deviceToken;
        this.active = active;
        this.tokenInput = tokenInput;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("confirmDevice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        confirmDevice_args args = new confirmDevice_args();
        args.setDeviceToken(deviceToken);
        args.setActive(active);
        args.setTokenInput(tokenInput);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws nl.earpi.generated.exception.LoginFailedException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_confirmDevice();
      }
    }

    public void changePassword(java.lang.String username, java.lang.String password, EarPiAuthObject tokenInput, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      changePassword_call method_call = new changePassword_call(username, password, tokenInput, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class changePassword_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String username;
      private java.lang.String password;
      private EarPiAuthObject tokenInput;
      public changePassword_call(java.lang.String username, java.lang.String password, EarPiAuthObject tokenInput, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.username = username;
        this.password = password;
        this.tokenInput = tokenInput;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("changePassword", org.apache.thrift.protocol.TMessageType.CALL, 0));
        changePassword_args args = new changePassword_args();
        args.setUsername(username);
        args.setPassword(password);
        args.setTokenInput(tokenInput);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws nl.earpi.generated.exception.BadHashException, nl.earpi.generated.exception.LoginFailedException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_changePassword();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getUserList", new getUserList());
      processMap.put("changeUser", new changeUser());
      processMap.put("configureUser", new configureUser());
      processMap.put("configureUserModule", new configureUserModule());
      processMap.put("configureModuleSettings", new configureModuleSettings());
      processMap.put("getDeviceList", new getDeviceList());
      processMap.put("confirmDevice", new confirmDevice());
      processMap.put("changePassword", new changePassword());
      return processMap;
    }

    public static class getUserList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUserList_args> {
      public getUserList() {
        super("getUserList");
      }

      public getUserList_args getEmptyArgsInstance() {
        return new getUserList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getUserList_result getResult(I iface, getUserList_args args) throws org.apache.thrift.TException {
        getUserList_result result = new getUserList_result();
        try {
          result.success = iface.getUserList(args.tokenInput);
        } catch (nl.earpi.generated.exception.LoginFailedException fail) {
          result.fail = fail;
        }
        return result;
      }
    }

    public static class changeUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, changeUser_args> {
      public changeUser() {
        super("changeUser");
      }

      public changeUser_args getEmptyArgsInstance() {
        return new changeUser_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public changeUser_result getResult(I iface, changeUser_args args) throws org.apache.thrift.TException {
        changeUser_result result = new changeUser_result();
        try {
          result.success = iface.changeUser(args.field, args.person, args.tokenInput);
        } catch (nl.earpi.generated.exception.LoginFailedException fail) {
          result.fail = fail;
        }
        return result;
      }
    }

    public static class configureUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, configureUser_args> {
      public configureUser() {
        super("configureUser");
      }

      public configureUser_args getEmptyArgsInstance() {
        return new configureUser_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public configureUser_result getResult(I iface, configureUser_args args) throws org.apache.thrift.TException {
        configureUser_result result = new configureUser_result();
        try {
          result.success = iface.configureUser(args.userList, args.tokenInput);
        } catch (nl.earpi.generated.exception.LoginFailedException fail) {
          result.fail = fail;
        }
        return result;
      }
    }

    public static class configureUserModule<I extends Iface> extends org.apache.thrift.ProcessFunction<I, configureUserModule_args> {
      public configureUserModule() {
        super("configureUserModule");
      }

      public configureUserModule_args getEmptyArgsInstance() {
        return new configureUserModule_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public configureUserModule_result getResult(I iface, configureUserModule_args args) throws org.apache.thrift.TException {
        configureUserModule_result result = new configureUserModule_result();
        try {
          result.success = iface.configureUserModule(args.uniquename, args.autorisations, args.tokenInput);
        } catch (nl.earpi.generated.exception.LoginFailedException fail) {
          result.fail = fail;
        }
        return result;
      }
    }

    public static class configureModuleSettings<I extends Iface> extends org.apache.thrift.ProcessFunction<I, configureModuleSettings_args> {
      public configureModuleSettings() {
        super("configureModuleSettings");
      }

      public configureModuleSettings_args getEmptyArgsInstance() {
        return new configureModuleSettings_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public configureModuleSettings_result getResult(I iface, configureModuleSettings_args args) throws org.apache.thrift.TException {
        configureModuleSettings_result result = new configureModuleSettings_result();
        try {
          result.success = iface.configureModuleSettings(args.uniquename, args.action, args.module_config, args.tokenInput);
        } catch (nl.earpi.generated.exception.LoginFailedException fail) {
          result.fail = fail;
        }
        return result;
      }
    }

    public static class getDeviceList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDeviceList_args> {
      public getDeviceList() {
        super("getDeviceList");
      }

      public getDeviceList_args getEmptyArgsInstance() {
        return new getDeviceList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getDeviceList_result getResult(I iface, getDeviceList_args args) throws org.apache.thrift.TException {
        getDeviceList_result result = new getDeviceList_result();
        try {
          result.success = iface.getDeviceList(args.tokenInput);
        } catch (nl.earpi.generated.exception.LoginFailedException fail) {
          result.fail = fail;
        }
        return result;
      }
    }

    public static class confirmDevice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, confirmDevice_args> {
      public confirmDevice() {
        super("confirmDevice");
      }

      public confirmDevice_args getEmptyArgsInstance() {
        return new confirmDevice_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public confirmDevice_result getResult(I iface, confirmDevice_args args) throws org.apache.thrift.TException {
        confirmDevice_result result = new confirmDevice_result();
        try {
          result.success = iface.confirmDevice(args.deviceToken, args.active, args.tokenInput);
        } catch (nl.earpi.generated.exception.LoginFailedException fail) {
          result.fail = fail;
        }
        return result;
      }
    }

    public static class changePassword<I extends Iface> extends org.apache.thrift.ProcessFunction<I, changePassword_args> {
      public changePassword() {
        super("changePassword");
      }

      public changePassword_args getEmptyArgsInstance() {
        return new changePassword_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public changePassword_result getResult(I iface, changePassword_args args) throws org.apache.thrift.TException {
        changePassword_result result = new changePassword_result();
        try {
          result.success = iface.changePassword(args.username, args.password, args.tokenInput);
        } catch (nl.earpi.generated.exception.BadHashException bad) {
          result.bad = bad;
        } catch (nl.earpi.generated.exception.LoginFailedException fail) {
          result.fail = fail;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getUserList", new getUserList());
      processMap.put("changeUser", new changeUser());
      processMap.put("configureUser", new configureUser());
      processMap.put("configureUserModule", new configureUserModule());
      processMap.put("configureModuleSettings", new configureModuleSettings());
      processMap.put("getDeviceList", new getDeviceList());
      processMap.put("confirmDevice", new confirmDevice());
      processMap.put("changePassword", new changePassword());
      return processMap;
    }

    public static class getUserList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getUserList_args, UserListOutput> {
      public getUserList() {
        super("getUserList");
      }

      public getUserList_args getEmptyArgsInstance() {
        return new getUserList_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<UserListOutput> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<UserListOutput>() { 
          public void onComplete(UserListOutput o) {
            getUserList_result result = new getUserList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getUserList_result result = new getUserList_result();
            if (e instanceof nl.earpi.generated.exception.LoginFailedException) {
              result.fail = (nl.earpi.generated.exception.LoginFailedException) e;
              result.setFailIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getUserList_args args, org.apache.thrift.async.AsyncMethodCallback<UserListOutput> resultHandler) throws org.apache.thrift.TException {
        iface.getUserList(args.tokenInput,resultHandler);
      }
    }

    public static class changeUser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, changeUser_args, java.lang.String> {
      public changeUser() {
        super("changeUser");
      }

      public changeUser_args getEmptyArgsInstance() {
        return new changeUser_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            changeUser_result result = new changeUser_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            changeUser_result result = new changeUser_result();
            if (e instanceof nl.earpi.generated.exception.LoginFailedException) {
              result.fail = (nl.earpi.generated.exception.LoginFailedException) e;
              result.setFailIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, changeUser_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.changeUser(args.field, args.person, args.tokenInput,resultHandler);
      }
    }

    public static class configureUser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, configureUser_args, java.lang.String> {
      public configureUser() {
        super("configureUser");
      }

      public configureUser_args getEmptyArgsInstance() {
        return new configureUser_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            configureUser_result result = new configureUser_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            configureUser_result result = new configureUser_result();
            if (e instanceof nl.earpi.generated.exception.LoginFailedException) {
              result.fail = (nl.earpi.generated.exception.LoginFailedException) e;
              result.setFailIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, configureUser_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.configureUser(args.userList, args.tokenInput,resultHandler);
      }
    }

    public static class configureUserModule<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, configureUserModule_args, java.lang.String> {
      public configureUserModule() {
        super("configureUserModule");
      }

      public configureUserModule_args getEmptyArgsInstance() {
        return new configureUserModule_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            configureUserModule_result result = new configureUserModule_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            configureUserModule_result result = new configureUserModule_result();
            if (e instanceof nl.earpi.generated.exception.LoginFailedException) {
              result.fail = (nl.earpi.generated.exception.LoginFailedException) e;
              result.setFailIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, configureUserModule_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.configureUserModule(args.uniquename, args.autorisations, args.tokenInput,resultHandler);
      }
    }

    public static class configureModuleSettings<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, configureModuleSettings_args, java.lang.String> {
      public configureModuleSettings() {
        super("configureModuleSettings");
      }

      public configureModuleSettings_args getEmptyArgsInstance() {
        return new configureModuleSettings_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            configureModuleSettings_result result = new configureModuleSettings_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            configureModuleSettings_result result = new configureModuleSettings_result();
            if (e instanceof nl.earpi.generated.exception.LoginFailedException) {
              result.fail = (nl.earpi.generated.exception.LoginFailedException) e;
              result.setFailIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, configureModuleSettings_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.configureModuleSettings(args.uniquename, args.action, args.module_config, args.tokenInput,resultHandler);
      }
    }

    public static class getDeviceList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getDeviceList_args, DeviceListOutput> {
      public getDeviceList() {
        super("getDeviceList");
      }

      public getDeviceList_args getEmptyArgsInstance() {
        return new getDeviceList_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<DeviceListOutput> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<DeviceListOutput>() { 
          public void onComplete(DeviceListOutput o) {
            getDeviceList_result result = new getDeviceList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getDeviceList_result result = new getDeviceList_result();
            if (e instanceof nl.earpi.generated.exception.LoginFailedException) {
              result.fail = (nl.earpi.generated.exception.LoginFailedException) e;
              result.setFailIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getDeviceList_args args, org.apache.thrift.async.AsyncMethodCallback<DeviceListOutput> resultHandler) throws org.apache.thrift.TException {
        iface.getDeviceList(args.tokenInput,resultHandler);
      }
    }

    public static class confirmDevice<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, confirmDevice_args, java.lang.String> {
      public confirmDevice() {
        super("confirmDevice");
      }

      public confirmDevice_args getEmptyArgsInstance() {
        return new confirmDevice_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            confirmDevice_result result = new confirmDevice_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            confirmDevice_result result = new confirmDevice_result();
            if (e instanceof nl.earpi.generated.exception.LoginFailedException) {
              result.fail = (nl.earpi.generated.exception.LoginFailedException) e;
              result.setFailIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, confirmDevice_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.confirmDevice(args.deviceToken, args.active, args.tokenInput,resultHandler);
      }
    }

    public static class changePassword<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, changePassword_args, java.lang.String> {
      public changePassword() {
        super("changePassword");
      }

      public changePassword_args getEmptyArgsInstance() {
        return new changePassword_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            changePassword_result result = new changePassword_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            changePassword_result result = new changePassword_result();
            if (e instanceof nl.earpi.generated.exception.BadHashException) {
              result.bad = (nl.earpi.generated.exception.BadHashException) e;
              result.setBadIsSet(true);
              msg = result;
            } else if (e instanceof nl.earpi.generated.exception.LoginFailedException) {
              result.fail = (nl.earpi.generated.exception.LoginFailedException) e;
              result.setFailIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, changePassword_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.changePassword(args.username, args.password, args.tokenInput,resultHandler);
      }
    }

  }

  public static class getUserList_args implements org.apache.thrift.TBase<getUserList_args, getUserList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getUserList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserList_args");

    private static final org.apache.thrift.protocol.TField TOKEN_INPUT_FIELD_DESC = new org.apache.thrift.protocol.TField("tokenInput", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUserList_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUserList_argsTupleSchemeFactory();

    public EarPiAuthObject tokenInput; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN_INPUT((short)1, "tokenInput");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN_INPUT
            return TOKEN_INPUT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN_INPUT, new org.apache.thrift.meta_data.FieldMetaData("tokenInput", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EarPiAuthObject.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserList_args.class, metaDataMap);
    }

    public getUserList_args() {
    }

    public getUserList_args(
      EarPiAuthObject tokenInput)
    {
      this();
      this.tokenInput = tokenInput;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserList_args(getUserList_args other) {
      if (other.isSetTokenInput()) {
        this.tokenInput = new EarPiAuthObject(other.tokenInput);
      }
    }

    public getUserList_args deepCopy() {
      return new getUserList_args(this);
    }

    @Override
    public void clear() {
      this.tokenInput = null;
    }

    public EarPiAuthObject getTokenInput() {
      return this.tokenInput;
    }

    public getUserList_args setTokenInput(EarPiAuthObject tokenInput) {
      this.tokenInput = tokenInput;
      return this;
    }

    public void unsetTokenInput() {
      this.tokenInput = null;
    }

    /** Returns true if field tokenInput is set (has been assigned a value) and false otherwise */
    public boolean isSetTokenInput() {
      return this.tokenInput != null;
    }

    public void setTokenInputIsSet(boolean value) {
      if (!value) {
        this.tokenInput = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case TOKEN_INPUT:
        if (value == null) {
          unsetTokenInput();
        } else {
          setTokenInput((EarPiAuthObject)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN_INPUT:
        return getTokenInput();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TOKEN_INPUT:
        return isSetTokenInput();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserList_args)
        return this.equals((getUserList_args)that);
      return false;
    }

    public boolean equals(getUserList_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_tokenInput = true && this.isSetTokenInput();
      boolean that_present_tokenInput = true && that.isSetTokenInput();
      if (this_present_tokenInput || that_present_tokenInput) {
        if (!(this_present_tokenInput && that_present_tokenInput))
          return false;
        if (!this.tokenInput.equals(that.tokenInput))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTokenInput()) ? 131071 : 524287);
      if (isSetTokenInput())
        hashCode = hashCode * 8191 + tokenInput.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getUserList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTokenInput()).compareTo(other.isSetTokenInput());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTokenInput()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tokenInput, other.tokenInput);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getUserList_args(");
      boolean first = true;

      sb.append("tokenInput:");
      if (this.tokenInput == null) {
        sb.append("null");
      } else {
        sb.append(this.tokenInput);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (tokenInput != null) {
        tokenInput.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserList_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getUserList_argsStandardScheme getScheme() {
        return new getUserList_argsStandardScheme();
      }
    }

    private static class getUserList_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getUserList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN_INPUT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tokenInput = new EarPiAuthObject();
                struct.tokenInput.read(iprot);
                struct.setTokenInputIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tokenInput != null) {
          oprot.writeFieldBegin(TOKEN_INPUT_FIELD_DESC);
          struct.tokenInput.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserList_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getUserList_argsTupleScheme getScheme() {
        return new getUserList_argsTupleScheme();
      }
    }

    private static class getUserList_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getUserList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTokenInput()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTokenInput()) {
          struct.tokenInput.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.tokenInput = new EarPiAuthObject();
          struct.tokenInput.read(iprot);
          struct.setTokenInputIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getUserList_result implements org.apache.thrift.TBase<getUserList_result, getUserList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getUserList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField FAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("fail", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUserList_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUserList_resultTupleSchemeFactory();

    public UserListOutput success; // required
    public nl.earpi.generated.exception.LoginFailedException fail; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      FAIL((short)1, "fail");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // FAIL
            return FAIL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserListOutput.class)));
      tmpMap.put(_Fields.FAIL, new org.apache.thrift.meta_data.FieldMetaData("fail", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, nl.earpi.generated.exception.LoginFailedException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserList_result.class, metaDataMap);
    }

    public getUserList_result() {
    }

    public getUserList_result(
      UserListOutput success,
      nl.earpi.generated.exception.LoginFailedException fail)
    {
      this();
      this.success = success;
      this.fail = fail;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserList_result(getUserList_result other) {
      if (other.isSetSuccess()) {
        this.success = new UserListOutput(other.success);
      }
      if (other.isSetFail()) {
        this.fail = new nl.earpi.generated.exception.LoginFailedException(other.fail);
      }
    }

    public getUserList_result deepCopy() {
      return new getUserList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.fail = null;
    }

    public UserListOutput getSuccess() {
      return this.success;
    }

    public getUserList_result setSuccess(UserListOutput success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public nl.earpi.generated.exception.LoginFailedException getFail() {
      return this.fail;
    }

    public getUserList_result setFail(nl.earpi.generated.exception.LoginFailedException fail) {
      this.fail = fail;
      return this;
    }

    public void unsetFail() {
      this.fail = null;
    }

    /** Returns true if field fail is set (has been assigned a value) and false otherwise */
    public boolean isSetFail() {
      return this.fail != null;
    }

    public void setFailIsSet(boolean value) {
      if (!value) {
        this.fail = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((UserListOutput)value);
        }
        break;

      case FAIL:
        if (value == null) {
          unsetFail();
        } else {
          setFail((nl.earpi.generated.exception.LoginFailedException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case FAIL:
        return getFail();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case FAIL:
        return isSetFail();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserList_result)
        return this.equals((getUserList_result)that);
      return false;
    }

    public boolean equals(getUserList_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_fail = true && this.isSetFail();
      boolean that_present_fail = true && that.isSetFail();
      if (this_present_fail || that_present_fail) {
        if (!(this_present_fail && that_present_fail))
          return false;
        if (!this.fail.equals(that.fail))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetFail()) ? 131071 : 524287);
      if (isSetFail())
        hashCode = hashCode * 8191 + fail.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getUserList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFail()).compareTo(other.isSetFail());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFail()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fail, other.fail);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getUserList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fail:");
      if (this.fail == null) {
        sb.append("null");
      } else {
        sb.append(this.fail);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserList_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getUserList_resultStandardScheme getScheme() {
        return new getUserList_resultStandardScheme();
      }
    }

    private static class getUserList_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getUserList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new UserListOutput();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // FAIL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.fail = new nl.earpi.generated.exception.LoginFailedException();
                struct.fail.read(iprot);
                struct.setFailIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.fail != null) {
          oprot.writeFieldBegin(FAIL_FIELD_DESC);
          struct.fail.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserList_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getUserList_resultTupleScheme getScheme() {
        return new getUserList_resultTupleScheme();
      }
    }

    private static class getUserList_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getUserList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetFail()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetFail()) {
          struct.fail.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new UserListOutput();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fail = new nl.earpi.generated.exception.LoginFailedException();
          struct.fail.read(iprot);
          struct.setFailIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class changeUser_args implements org.apache.thrift.TBase<changeUser_args, changeUser_args._Fields>, java.io.Serializable, Cloneable, Comparable<changeUser_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("changeUser_args");

    private static final org.apache.thrift.protocol.TField FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("field", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PERSON_FIELD_DESC = new org.apache.thrift.protocol.TField("person", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField TOKEN_INPUT_FIELD_DESC = new org.apache.thrift.protocol.TField("tokenInput", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new changeUser_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new changeUser_argsTupleSchemeFactory();

    public java.lang.String field; // required
    public nl.earpi.generated.autorisationstruct.Person person; // required
    public EarPiAuthObject tokenInput; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FIELD((short)1, "field"),
      PERSON((short)2, "person"),
      TOKEN_INPUT((short)4, "tokenInput");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FIELD
            return FIELD;
          case 2: // PERSON
            return PERSON;
          case 4: // TOKEN_INPUT
            return TOKEN_INPUT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FIELD, new org.apache.thrift.meta_data.FieldMetaData("field", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PERSON, new org.apache.thrift.meta_data.FieldMetaData("person", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, nl.earpi.generated.autorisationstruct.Person.class)));
      tmpMap.put(_Fields.TOKEN_INPUT, new org.apache.thrift.meta_data.FieldMetaData("tokenInput", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EarPiAuthObject.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(changeUser_args.class, metaDataMap);
    }

    public changeUser_args() {
    }

    public changeUser_args(
      java.lang.String field,
      nl.earpi.generated.autorisationstruct.Person person,
      EarPiAuthObject tokenInput)
    {
      this();
      this.field = field;
      this.person = person;
      this.tokenInput = tokenInput;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public changeUser_args(changeUser_args other) {
      if (other.isSetField()) {
        this.field = other.field;
      }
      if (other.isSetPerson()) {
        this.person = new nl.earpi.generated.autorisationstruct.Person(other.person);
      }
      if (other.isSetTokenInput()) {
        this.tokenInput = new EarPiAuthObject(other.tokenInput);
      }
    }

    public changeUser_args deepCopy() {
      return new changeUser_args(this);
    }

    @Override
    public void clear() {
      this.field = null;
      this.person = null;
      this.tokenInput = null;
    }

    public java.lang.String getField() {
      return this.field;
    }

    public changeUser_args setField(java.lang.String field) {
      this.field = field;
      return this;
    }

    public void unsetField() {
      this.field = null;
    }

    /** Returns true if field field is set (has been assigned a value) and false otherwise */
    public boolean isSetField() {
      return this.field != null;
    }

    public void setFieldIsSet(boolean value) {
      if (!value) {
        this.field = null;
      }
    }

    public nl.earpi.generated.autorisationstruct.Person getPerson() {
      return this.person;
    }

    public changeUser_args setPerson(nl.earpi.generated.autorisationstruct.Person person) {
      this.person = person;
      return this;
    }

    public void unsetPerson() {
      this.person = null;
    }

    /** Returns true if field person is set (has been assigned a value) and false otherwise */
    public boolean isSetPerson() {
      return this.person != null;
    }

    public void setPersonIsSet(boolean value) {
      if (!value) {
        this.person = null;
      }
    }

    public EarPiAuthObject getTokenInput() {
      return this.tokenInput;
    }

    public changeUser_args setTokenInput(EarPiAuthObject tokenInput) {
      this.tokenInput = tokenInput;
      return this;
    }

    public void unsetTokenInput() {
      this.tokenInput = null;
    }

    /** Returns true if field tokenInput is set (has been assigned a value) and false otherwise */
    public boolean isSetTokenInput() {
      return this.tokenInput != null;
    }

    public void setTokenInputIsSet(boolean value) {
      if (!value) {
        this.tokenInput = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case FIELD:
        if (value == null) {
          unsetField();
        } else {
          setField((java.lang.String)value);
        }
        break;

      case PERSON:
        if (value == null) {
          unsetPerson();
        } else {
          setPerson((nl.earpi.generated.autorisationstruct.Person)value);
        }
        break;

      case TOKEN_INPUT:
        if (value == null) {
          unsetTokenInput();
        } else {
          setTokenInput((EarPiAuthObject)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case FIELD:
        return getField();

      case PERSON:
        return getPerson();

      case TOKEN_INPUT:
        return getTokenInput();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case FIELD:
        return isSetField();
      case PERSON:
        return isSetPerson();
      case TOKEN_INPUT:
        return isSetTokenInput();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof changeUser_args)
        return this.equals((changeUser_args)that);
      return false;
    }

    public boolean equals(changeUser_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_field = true && this.isSetField();
      boolean that_present_field = true && that.isSetField();
      if (this_present_field || that_present_field) {
        if (!(this_present_field && that_present_field))
          return false;
        if (!this.field.equals(that.field))
          return false;
      }

      boolean this_present_person = true && this.isSetPerson();
      boolean that_present_person = true && that.isSetPerson();
      if (this_present_person || that_present_person) {
        if (!(this_present_person && that_present_person))
          return false;
        if (!this.person.equals(that.person))
          return false;
      }

      boolean this_present_tokenInput = true && this.isSetTokenInput();
      boolean that_present_tokenInput = true && that.isSetTokenInput();
      if (this_present_tokenInput || that_present_tokenInput) {
        if (!(this_present_tokenInput && that_present_tokenInput))
          return false;
        if (!this.tokenInput.equals(that.tokenInput))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetField()) ? 131071 : 524287);
      if (isSetField())
        hashCode = hashCode * 8191 + field.hashCode();

      hashCode = hashCode * 8191 + ((isSetPerson()) ? 131071 : 524287);
      if (isSetPerson())
        hashCode = hashCode * 8191 + person.hashCode();

      hashCode = hashCode * 8191 + ((isSetTokenInput()) ? 131071 : 524287);
      if (isSetTokenInput())
        hashCode = hashCode * 8191 + tokenInput.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(changeUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetField()).compareTo(other.isSetField());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetField()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.field, other.field);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPerson()).compareTo(other.isSetPerson());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPerson()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.person, other.person);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTokenInput()).compareTo(other.isSetTokenInput());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTokenInput()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tokenInput, other.tokenInput);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("changeUser_args(");
      boolean first = true;

      sb.append("field:");
      if (this.field == null) {
        sb.append("null");
      } else {
        sb.append(this.field);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("person:");
      if (this.person == null) {
        sb.append("null");
      } else {
        sb.append(this.person);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tokenInput:");
      if (this.tokenInput == null) {
        sb.append("null");
      } else {
        sb.append(this.tokenInput);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (person != null) {
        person.validate();
      }
      if (tokenInput != null) {
        tokenInput.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class changeUser_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public changeUser_argsStandardScheme getScheme() {
        return new changeUser_argsStandardScheme();
      }
    }

    private static class changeUser_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<changeUser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, changeUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FIELD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.field = iprot.readString();
                struct.setFieldIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PERSON
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.person = new nl.earpi.generated.autorisationstruct.Person();
                struct.person.read(iprot);
                struct.setPersonIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TOKEN_INPUT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tokenInput = new EarPiAuthObject();
                struct.tokenInput.read(iprot);
                struct.setTokenInputIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, changeUser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.field != null) {
          oprot.writeFieldBegin(FIELD_FIELD_DESC);
          oprot.writeString(struct.field);
          oprot.writeFieldEnd();
        }
        if (struct.person != null) {
          oprot.writeFieldBegin(PERSON_FIELD_DESC);
          struct.person.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tokenInput != null) {
          oprot.writeFieldBegin(TOKEN_INPUT_FIELD_DESC);
          struct.tokenInput.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class changeUser_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public changeUser_argsTupleScheme getScheme() {
        return new changeUser_argsTupleScheme();
      }
    }

    private static class changeUser_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<changeUser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, changeUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetField()) {
          optionals.set(0);
        }
        if (struct.isSetPerson()) {
          optionals.set(1);
        }
        if (struct.isSetTokenInput()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetField()) {
          oprot.writeString(struct.field);
        }
        if (struct.isSetPerson()) {
          struct.person.write(oprot);
        }
        if (struct.isSetTokenInput()) {
          struct.tokenInput.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, changeUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.field = iprot.readString();
          struct.setFieldIsSet(true);
        }
        if (incoming.get(1)) {
          struct.person = new nl.earpi.generated.autorisationstruct.Person();
          struct.person.read(iprot);
          struct.setPersonIsSet(true);
        }
        if (incoming.get(2)) {
          struct.tokenInput = new EarPiAuthObject();
          struct.tokenInput.read(iprot);
          struct.setTokenInputIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class changeUser_result implements org.apache.thrift.TBase<changeUser_result, changeUser_result._Fields>, java.io.Serializable, Cloneable, Comparable<changeUser_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("changeUser_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField FAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("fail", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new changeUser_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new changeUser_resultTupleSchemeFactory();

    public java.lang.String success; // required
    public nl.earpi.generated.exception.LoginFailedException fail; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      FAIL((short)1, "fail");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // FAIL
            return FAIL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FAIL, new org.apache.thrift.meta_data.FieldMetaData("fail", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, nl.earpi.generated.exception.LoginFailedException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(changeUser_result.class, metaDataMap);
    }

    public changeUser_result() {
    }

    public changeUser_result(
      java.lang.String success,
      nl.earpi.generated.exception.LoginFailedException fail)
    {
      this();
      this.success = success;
      this.fail = fail;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public changeUser_result(changeUser_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetFail()) {
        this.fail = new nl.earpi.generated.exception.LoginFailedException(other.fail);
      }
    }

    public changeUser_result deepCopy() {
      return new changeUser_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.fail = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public changeUser_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public nl.earpi.generated.exception.LoginFailedException getFail() {
      return this.fail;
    }

    public changeUser_result setFail(nl.earpi.generated.exception.LoginFailedException fail) {
      this.fail = fail;
      return this;
    }

    public void unsetFail() {
      this.fail = null;
    }

    /** Returns true if field fail is set (has been assigned a value) and false otherwise */
    public boolean isSetFail() {
      return this.fail != null;
    }

    public void setFailIsSet(boolean value) {
      if (!value) {
        this.fail = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case FAIL:
        if (value == null) {
          unsetFail();
        } else {
          setFail((nl.earpi.generated.exception.LoginFailedException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case FAIL:
        return getFail();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case FAIL:
        return isSetFail();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof changeUser_result)
        return this.equals((changeUser_result)that);
      return false;
    }

    public boolean equals(changeUser_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_fail = true && this.isSetFail();
      boolean that_present_fail = true && that.isSetFail();
      if (this_present_fail || that_present_fail) {
        if (!(this_present_fail && that_present_fail))
          return false;
        if (!this.fail.equals(that.fail))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetFail()) ? 131071 : 524287);
      if (isSetFail())
        hashCode = hashCode * 8191 + fail.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(changeUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFail()).compareTo(other.isSetFail());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFail()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fail, other.fail);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("changeUser_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fail:");
      if (this.fail == null) {
        sb.append("null");
      } else {
        sb.append(this.fail);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class changeUser_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public changeUser_resultStandardScheme getScheme() {
        return new changeUser_resultStandardScheme();
      }
    }

    private static class changeUser_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<changeUser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, changeUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // FAIL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.fail = new nl.earpi.generated.exception.LoginFailedException();
                struct.fail.read(iprot);
                struct.setFailIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, changeUser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.fail != null) {
          oprot.writeFieldBegin(FAIL_FIELD_DESC);
          struct.fail.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class changeUser_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public changeUser_resultTupleScheme getScheme() {
        return new changeUser_resultTupleScheme();
      }
    }

    private static class changeUser_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<changeUser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, changeUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetFail()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetFail()) {
          struct.fail.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, changeUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fail = new nl.earpi.generated.exception.LoginFailedException();
          struct.fail.read(iprot);
          struct.setFailIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class configureUser_args implements org.apache.thrift.TBase<configureUser_args, configureUser_args._Fields>, java.io.Serializable, Cloneable, Comparable<configureUser_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("configureUser_args");

    private static final org.apache.thrift.protocol.TField USER_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("userList", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField TOKEN_INPUT_FIELD_DESC = new org.apache.thrift.protocol.TField("tokenInput", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new configureUser_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new configureUser_argsTupleSchemeFactory();

    public java.util.List<nl.earpi.generated.autorisationstruct.Person> userList; // required
    public EarPiAuthObject tokenInput; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_LIST((short)1, "userList"),
      TOKEN_INPUT((short)2, "tokenInput");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_LIST
            return USER_LIST;
          case 2: // TOKEN_INPUT
            return TOKEN_INPUT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_LIST, new org.apache.thrift.meta_data.FieldMetaData("userList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, nl.earpi.generated.autorisationstruct.Person.class))));
      tmpMap.put(_Fields.TOKEN_INPUT, new org.apache.thrift.meta_data.FieldMetaData("tokenInput", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EarPiAuthObject.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(configureUser_args.class, metaDataMap);
    }

    public configureUser_args() {
    }

    public configureUser_args(
      java.util.List<nl.earpi.generated.autorisationstruct.Person> userList,
      EarPiAuthObject tokenInput)
    {
      this();
      this.userList = userList;
      this.tokenInput = tokenInput;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public configureUser_args(configureUser_args other) {
      if (other.isSetUserList()) {
        java.util.List<nl.earpi.generated.autorisationstruct.Person> __this__userList = new java.util.ArrayList<nl.earpi.generated.autorisationstruct.Person>(other.userList.size());
        for (nl.earpi.generated.autorisationstruct.Person other_element : other.userList) {
          __this__userList.add(new nl.earpi.generated.autorisationstruct.Person(other_element));
        }
        this.userList = __this__userList;
      }
      if (other.isSetTokenInput()) {
        this.tokenInput = new EarPiAuthObject(other.tokenInput);
      }
    }

    public configureUser_args deepCopy() {
      return new configureUser_args(this);
    }

    @Override
    public void clear() {
      this.userList = null;
      this.tokenInput = null;
    }

    public int getUserListSize() {
      return (this.userList == null) ? 0 : this.userList.size();
    }

    public java.util.Iterator<nl.earpi.generated.autorisationstruct.Person> getUserListIterator() {
      return (this.userList == null) ? null : this.userList.iterator();
    }

    public void addToUserList(nl.earpi.generated.autorisationstruct.Person elem) {
      if (this.userList == null) {
        this.userList = new java.util.ArrayList<nl.earpi.generated.autorisationstruct.Person>();
      }
      this.userList.add(elem);
    }

    public java.util.List<nl.earpi.generated.autorisationstruct.Person> getUserList() {
      return this.userList;
    }

    public configureUser_args setUserList(java.util.List<nl.earpi.generated.autorisationstruct.Person> userList) {
      this.userList = userList;
      return this;
    }

    public void unsetUserList() {
      this.userList = null;
    }

    /** Returns true if field userList is set (has been assigned a value) and false otherwise */
    public boolean isSetUserList() {
      return this.userList != null;
    }

    public void setUserListIsSet(boolean value) {
      if (!value) {
        this.userList = null;
      }
    }

    public EarPiAuthObject getTokenInput() {
      return this.tokenInput;
    }

    public configureUser_args setTokenInput(EarPiAuthObject tokenInput) {
      this.tokenInput = tokenInput;
      return this;
    }

    public void unsetTokenInput() {
      this.tokenInput = null;
    }

    /** Returns true if field tokenInput is set (has been assigned a value) and false otherwise */
    public boolean isSetTokenInput() {
      return this.tokenInput != null;
    }

    public void setTokenInputIsSet(boolean value) {
      if (!value) {
        this.tokenInput = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case USER_LIST:
        if (value == null) {
          unsetUserList();
        } else {
          setUserList((java.util.List<nl.earpi.generated.autorisationstruct.Person>)value);
        }
        break;

      case TOKEN_INPUT:
        if (value == null) {
          unsetTokenInput();
        } else {
          setTokenInput((EarPiAuthObject)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_LIST:
        return getUserList();

      case TOKEN_INPUT:
        return getTokenInput();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case USER_LIST:
        return isSetUserList();
      case TOKEN_INPUT:
        return isSetTokenInput();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof configureUser_args)
        return this.equals((configureUser_args)that);
      return false;
    }

    public boolean equals(configureUser_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_userList = true && this.isSetUserList();
      boolean that_present_userList = true && that.isSetUserList();
      if (this_present_userList || that_present_userList) {
        if (!(this_present_userList && that_present_userList))
          return false;
        if (!this.userList.equals(that.userList))
          return false;
      }

      boolean this_present_tokenInput = true && this.isSetTokenInput();
      boolean that_present_tokenInput = true && that.isSetTokenInput();
      if (this_present_tokenInput || that_present_tokenInput) {
        if (!(this_present_tokenInput && that_present_tokenInput))
          return false;
        if (!this.tokenInput.equals(that.tokenInput))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetUserList()) ? 131071 : 524287);
      if (isSetUserList())
        hashCode = hashCode * 8191 + userList.hashCode();

      hashCode = hashCode * 8191 + ((isSetTokenInput()) ? 131071 : 524287);
      if (isSetTokenInput())
        hashCode = hashCode * 8191 + tokenInput.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(configureUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetUserList()).compareTo(other.isSetUserList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userList, other.userList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTokenInput()).compareTo(other.isSetTokenInput());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTokenInput()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tokenInput, other.tokenInput);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("configureUser_args(");
      boolean first = true;

      sb.append("userList:");
      if (this.userList == null) {
        sb.append("null");
      } else {
        sb.append(this.userList);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tokenInput:");
      if (this.tokenInput == null) {
        sb.append("null");
      } else {
        sb.append(this.tokenInput);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (tokenInput != null) {
        tokenInput.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class configureUser_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public configureUser_argsStandardScheme getScheme() {
        return new configureUser_argsStandardScheme();
      }
    }

    private static class configureUser_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<configureUser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, configureUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list36 = iprot.readListBegin();
                  struct.userList = new java.util.ArrayList<nl.earpi.generated.autorisationstruct.Person>(_list36.size);
                  nl.earpi.generated.autorisationstruct.Person _elem37;
                  for (int _i38 = 0; _i38 < _list36.size; ++_i38)
                  {
                    _elem37 = new nl.earpi.generated.autorisationstruct.Person();
                    _elem37.read(iprot);
                    struct.userList.add(_elem37);
                  }
                  iprot.readListEnd();
                }
                struct.setUserListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TOKEN_INPUT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tokenInput = new EarPiAuthObject();
                struct.tokenInput.read(iprot);
                struct.setTokenInputIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, configureUser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userList != null) {
          oprot.writeFieldBegin(USER_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.userList.size()));
            for (nl.earpi.generated.autorisationstruct.Person _iter39 : struct.userList)
            {
              _iter39.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.tokenInput != null) {
          oprot.writeFieldBegin(TOKEN_INPUT_FIELD_DESC);
          struct.tokenInput.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class configureUser_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public configureUser_argsTupleScheme getScheme() {
        return new configureUser_argsTupleScheme();
      }
    }

    private static class configureUser_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<configureUser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, configureUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUserList()) {
          optionals.set(0);
        }
        if (struct.isSetTokenInput()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUserList()) {
          {
            oprot.writeI32(struct.userList.size());
            for (nl.earpi.generated.autorisationstruct.Person _iter40 : struct.userList)
            {
              _iter40.write(oprot);
            }
          }
        }
        if (struct.isSetTokenInput()) {
          struct.tokenInput.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, configureUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list41 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.userList = new java.util.ArrayList<nl.earpi.generated.autorisationstruct.Person>(_list41.size);
            nl.earpi.generated.autorisationstruct.Person _elem42;
            for (int _i43 = 0; _i43 < _list41.size; ++_i43)
            {
              _elem42 = new nl.earpi.generated.autorisationstruct.Person();
              _elem42.read(iprot);
              struct.userList.add(_elem42);
            }
          }
          struct.setUserListIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tokenInput = new EarPiAuthObject();
          struct.tokenInput.read(iprot);
          struct.setTokenInputIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class configureUser_result implements org.apache.thrift.TBase<configureUser_result, configureUser_result._Fields>, java.io.Serializable, Cloneable, Comparable<configureUser_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("configureUser_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField FAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("fail", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new configureUser_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new configureUser_resultTupleSchemeFactory();

    public java.lang.String success; // required
    public nl.earpi.generated.exception.LoginFailedException fail; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      FAIL((short)1, "fail");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // FAIL
            return FAIL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FAIL, new org.apache.thrift.meta_data.FieldMetaData("fail", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, nl.earpi.generated.exception.LoginFailedException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(configureUser_result.class, metaDataMap);
    }

    public configureUser_result() {
    }

    public configureUser_result(
      java.lang.String success,
      nl.earpi.generated.exception.LoginFailedException fail)
    {
      this();
      this.success = success;
      this.fail = fail;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public configureUser_result(configureUser_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetFail()) {
        this.fail = new nl.earpi.generated.exception.LoginFailedException(other.fail);
      }
    }

    public configureUser_result deepCopy() {
      return new configureUser_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.fail = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public configureUser_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public nl.earpi.generated.exception.LoginFailedException getFail() {
      return this.fail;
    }

    public configureUser_result setFail(nl.earpi.generated.exception.LoginFailedException fail) {
      this.fail = fail;
      return this;
    }

    public void unsetFail() {
      this.fail = null;
    }

    /** Returns true if field fail is set (has been assigned a value) and false otherwise */
    public boolean isSetFail() {
      return this.fail != null;
    }

    public void setFailIsSet(boolean value) {
      if (!value) {
        this.fail = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case FAIL:
        if (value == null) {
          unsetFail();
        } else {
          setFail((nl.earpi.generated.exception.LoginFailedException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case FAIL:
        return getFail();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case FAIL:
        return isSetFail();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof configureUser_result)
        return this.equals((configureUser_result)that);
      return false;
    }

    public boolean equals(configureUser_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_fail = true && this.isSetFail();
      boolean that_present_fail = true && that.isSetFail();
      if (this_present_fail || that_present_fail) {
        if (!(this_present_fail && that_present_fail))
          return false;
        if (!this.fail.equals(that.fail))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetFail()) ? 131071 : 524287);
      if (isSetFail())
        hashCode = hashCode * 8191 + fail.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(configureUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFail()).compareTo(other.isSetFail());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFail()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fail, other.fail);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("configureUser_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fail:");
      if (this.fail == null) {
        sb.append("null");
      } else {
        sb.append(this.fail);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class configureUser_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public configureUser_resultStandardScheme getScheme() {
        return new configureUser_resultStandardScheme();
      }
    }

    private static class configureUser_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<configureUser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, configureUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // FAIL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.fail = new nl.earpi.generated.exception.LoginFailedException();
                struct.fail.read(iprot);
                struct.setFailIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, configureUser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.fail != null) {
          oprot.writeFieldBegin(FAIL_FIELD_DESC);
          struct.fail.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class configureUser_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public configureUser_resultTupleScheme getScheme() {
        return new configureUser_resultTupleScheme();
      }
    }

    private static class configureUser_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<configureUser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, configureUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetFail()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetFail()) {
          struct.fail.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, configureUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fail = new nl.earpi.generated.exception.LoginFailedException();
          struct.fail.read(iprot);
          struct.setFailIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class configureUserModule_args implements org.apache.thrift.TBase<configureUserModule_args, configureUserModule_args._Fields>, java.io.Serializable, Cloneable, Comparable<configureUserModule_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("configureUserModule_args");

    private static final org.apache.thrift.protocol.TField UNIQUENAME_FIELD_DESC = new org.apache.thrift.protocol.TField("uniquename", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField AUTORISATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("autorisations", org.apache.thrift.protocol.TType.MAP, (short)2);
    private static final org.apache.thrift.protocol.TField TOKEN_INPUT_FIELD_DESC = new org.apache.thrift.protocol.TField("tokenInput", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new configureUserModule_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new configureUserModule_argsTupleSchemeFactory();

    public java.lang.String uniquename; // required
    public java.util.Map<nl.earpi.generated.genericstruct.ActionEnum,nl.earpi.generated.autorisationstruct.Autorisation> autorisations; // required
    public EarPiAuthObject tokenInput; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UNIQUENAME((short)1, "uniquename"),
      AUTORISATIONS((short)2, "autorisations"),
      TOKEN_INPUT((short)3, "tokenInput");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UNIQUENAME
            return UNIQUENAME;
          case 2: // AUTORISATIONS
            return AUTORISATIONS;
          case 3: // TOKEN_INPUT
            return TOKEN_INPUT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UNIQUENAME, new org.apache.thrift.meta_data.FieldMetaData("uniquename", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AUTORISATIONS, new org.apache.thrift.meta_data.FieldMetaData("autorisations", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, nl.earpi.generated.genericstruct.ActionEnum.class), 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, nl.earpi.generated.autorisationstruct.Autorisation.class))));
      tmpMap.put(_Fields.TOKEN_INPUT, new org.apache.thrift.meta_data.FieldMetaData("tokenInput", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EarPiAuthObject.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(configureUserModule_args.class, metaDataMap);
    }

    public configureUserModule_args() {
    }

    public configureUserModule_args(
      java.lang.String uniquename,
      java.util.Map<nl.earpi.generated.genericstruct.ActionEnum,nl.earpi.generated.autorisationstruct.Autorisation> autorisations,
      EarPiAuthObject tokenInput)
    {
      this();
      this.uniquename = uniquename;
      this.autorisations = autorisations;
      this.tokenInput = tokenInput;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public configureUserModule_args(configureUserModule_args other) {
      if (other.isSetUniquename()) {
        this.uniquename = other.uniquename;
      }
      if (other.isSetAutorisations()) {
        java.util.Map<nl.earpi.generated.genericstruct.ActionEnum,nl.earpi.generated.autorisationstruct.Autorisation> __this__autorisations = new java.util.HashMap<nl.earpi.generated.genericstruct.ActionEnum,nl.earpi.generated.autorisationstruct.Autorisation>(other.autorisations.size());
        for (java.util.Map.Entry<nl.earpi.generated.genericstruct.ActionEnum, nl.earpi.generated.autorisationstruct.Autorisation> other_element : other.autorisations.entrySet()) {

          nl.earpi.generated.genericstruct.ActionEnum other_element_key = other_element.getKey();
          nl.earpi.generated.autorisationstruct.Autorisation other_element_value = other_element.getValue();

          nl.earpi.generated.genericstruct.ActionEnum __this__autorisations_copy_key = other_element_key;

          nl.earpi.generated.autorisationstruct.Autorisation __this__autorisations_copy_value = new nl.earpi.generated.autorisationstruct.Autorisation(other_element_value);

          __this__autorisations.put(__this__autorisations_copy_key, __this__autorisations_copy_value);
        }
        this.autorisations = __this__autorisations;
      }
      if (other.isSetTokenInput()) {
        this.tokenInput = new EarPiAuthObject(other.tokenInput);
      }
    }

    public configureUserModule_args deepCopy() {
      return new configureUserModule_args(this);
    }

    @Override
    public void clear() {
      this.uniquename = null;
      this.autorisations = null;
      this.tokenInput = null;
    }

    public java.lang.String getUniquename() {
      return this.uniquename;
    }

    public configureUserModule_args setUniquename(java.lang.String uniquename) {
      this.uniquename = uniquename;
      return this;
    }

    public void unsetUniquename() {
      this.uniquename = null;
    }

    /** Returns true if field uniquename is set (has been assigned a value) and false otherwise */
    public boolean isSetUniquename() {
      return this.uniquename != null;
    }

    public void setUniquenameIsSet(boolean value) {
      if (!value) {
        this.uniquename = null;
      }
    }

    public int getAutorisationsSize() {
      return (this.autorisations == null) ? 0 : this.autorisations.size();
    }

    public void putToAutorisations(nl.earpi.generated.genericstruct.ActionEnum key, nl.earpi.generated.autorisationstruct.Autorisation val) {
      if (this.autorisations == null) {
        this.autorisations = new java.util.HashMap<nl.earpi.generated.genericstruct.ActionEnum,nl.earpi.generated.autorisationstruct.Autorisation>();
      }
      this.autorisations.put(key, val);
    }

    public java.util.Map<nl.earpi.generated.genericstruct.ActionEnum,nl.earpi.generated.autorisationstruct.Autorisation> getAutorisations() {
      return this.autorisations;
    }

    public configureUserModule_args setAutorisations(java.util.Map<nl.earpi.generated.genericstruct.ActionEnum,nl.earpi.generated.autorisationstruct.Autorisation> autorisations) {
      this.autorisations = autorisations;
      return this;
    }

    public void unsetAutorisations() {
      this.autorisations = null;
    }

    /** Returns true if field autorisations is set (has been assigned a value) and false otherwise */
    public boolean isSetAutorisations() {
      return this.autorisations != null;
    }

    public void setAutorisationsIsSet(boolean value) {
      if (!value) {
        this.autorisations = null;
      }
    }

    public EarPiAuthObject getTokenInput() {
      return this.tokenInput;
    }

    public configureUserModule_args setTokenInput(EarPiAuthObject tokenInput) {
      this.tokenInput = tokenInput;
      return this;
    }

    public void unsetTokenInput() {
      this.tokenInput = null;
    }

    /** Returns true if field tokenInput is set (has been assigned a value) and false otherwise */
    public boolean isSetTokenInput() {
      return this.tokenInput != null;
    }

    public void setTokenInputIsSet(boolean value) {
      if (!value) {
        this.tokenInput = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case UNIQUENAME:
        if (value == null) {
          unsetUniquename();
        } else {
          setUniquename((java.lang.String)value);
        }
        break;

      case AUTORISATIONS:
        if (value == null) {
          unsetAutorisations();
        } else {
          setAutorisations((java.util.Map<nl.earpi.generated.genericstruct.ActionEnum,nl.earpi.generated.autorisationstruct.Autorisation>)value);
        }
        break;

      case TOKEN_INPUT:
        if (value == null) {
          unsetTokenInput();
        } else {
          setTokenInput((EarPiAuthObject)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case UNIQUENAME:
        return getUniquename();

      case AUTORISATIONS:
        return getAutorisations();

      case TOKEN_INPUT:
        return getTokenInput();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case UNIQUENAME:
        return isSetUniquename();
      case AUTORISATIONS:
        return isSetAutorisations();
      case TOKEN_INPUT:
        return isSetTokenInput();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof configureUserModule_args)
        return this.equals((configureUserModule_args)that);
      return false;
    }

    public boolean equals(configureUserModule_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_uniquename = true && this.isSetUniquename();
      boolean that_present_uniquename = true && that.isSetUniquename();
      if (this_present_uniquename || that_present_uniquename) {
        if (!(this_present_uniquename && that_present_uniquename))
          return false;
        if (!this.uniquename.equals(that.uniquename))
          return false;
      }

      boolean this_present_autorisations = true && this.isSetAutorisations();
      boolean that_present_autorisations = true && that.isSetAutorisations();
      if (this_present_autorisations || that_present_autorisations) {
        if (!(this_present_autorisations && that_present_autorisations))
          return false;
        if (!this.autorisations.equals(that.autorisations))
          return false;
      }

      boolean this_present_tokenInput = true && this.isSetTokenInput();
      boolean that_present_tokenInput = true && that.isSetTokenInput();
      if (this_present_tokenInput || that_present_tokenInput) {
        if (!(this_present_tokenInput && that_present_tokenInput))
          return false;
        if (!this.tokenInput.equals(that.tokenInput))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetUniquename()) ? 131071 : 524287);
      if (isSetUniquename())
        hashCode = hashCode * 8191 + uniquename.hashCode();

      hashCode = hashCode * 8191 + ((isSetAutorisations()) ? 131071 : 524287);
      if (isSetAutorisations())
        hashCode = hashCode * 8191 + autorisations.hashCode();

      hashCode = hashCode * 8191 + ((isSetTokenInput()) ? 131071 : 524287);
      if (isSetTokenInput())
        hashCode = hashCode * 8191 + tokenInput.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(configureUserModule_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetUniquename()).compareTo(other.isSetUniquename());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUniquename()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uniquename, other.uniquename);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAutorisations()).compareTo(other.isSetAutorisations());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAutorisations()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.autorisations, other.autorisations);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTokenInput()).compareTo(other.isSetTokenInput());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTokenInput()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tokenInput, other.tokenInput);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("configureUserModule_args(");
      boolean first = true;

      sb.append("uniquename:");
      if (this.uniquename == null) {
        sb.append("null");
      } else {
        sb.append(this.uniquename);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("autorisations:");
      if (this.autorisations == null) {
        sb.append("null");
      } else {
        sb.append(this.autorisations);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tokenInput:");
      if (this.tokenInput == null) {
        sb.append("null");
      } else {
        sb.append(this.tokenInput);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (tokenInput != null) {
        tokenInput.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class configureUserModule_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public configureUserModule_argsStandardScheme getScheme() {
        return new configureUserModule_argsStandardScheme();
      }
    }

    private static class configureUserModule_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<configureUserModule_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, configureUserModule_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UNIQUENAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.uniquename = iprot.readString();
                struct.setUniquenameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AUTORISATIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map44 = iprot.readMapBegin();
                  struct.autorisations = new java.util.HashMap<nl.earpi.generated.genericstruct.ActionEnum,nl.earpi.generated.autorisationstruct.Autorisation>(2*_map44.size);
                  nl.earpi.generated.genericstruct.ActionEnum _key45;
                  nl.earpi.generated.autorisationstruct.Autorisation _val46;
                  for (int _i47 = 0; _i47 < _map44.size; ++_i47)
                  {
                    _key45 = nl.earpi.generated.genericstruct.ActionEnum.findByValue(iprot.readI32());
                    _val46 = new nl.earpi.generated.autorisationstruct.Autorisation();
                    _val46.read(iprot);
                    struct.autorisations.put(_key45, _val46);
                  }
                  iprot.readMapEnd();
                }
                struct.setAutorisationsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TOKEN_INPUT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tokenInput = new EarPiAuthObject();
                struct.tokenInput.read(iprot);
                struct.setTokenInputIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, configureUserModule_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.uniquename != null) {
          oprot.writeFieldBegin(UNIQUENAME_FIELD_DESC);
          oprot.writeString(struct.uniquename);
          oprot.writeFieldEnd();
        }
        if (struct.autorisations != null) {
          oprot.writeFieldBegin(AUTORISATIONS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, struct.autorisations.size()));
            for (java.util.Map.Entry<nl.earpi.generated.genericstruct.ActionEnum, nl.earpi.generated.autorisationstruct.Autorisation> _iter48 : struct.autorisations.entrySet())
            {
              oprot.writeI32(_iter48.getKey().getValue());
              _iter48.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.tokenInput != null) {
          oprot.writeFieldBegin(TOKEN_INPUT_FIELD_DESC);
          struct.tokenInput.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class configureUserModule_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public configureUserModule_argsTupleScheme getScheme() {
        return new configureUserModule_argsTupleScheme();
      }
    }

    private static class configureUserModule_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<configureUserModule_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, configureUserModule_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUniquename()) {
          optionals.set(0);
        }
        if (struct.isSetAutorisations()) {
          optionals.set(1);
        }
        if (struct.isSetTokenInput()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUniquename()) {
          oprot.writeString(struct.uniquename);
        }
        if (struct.isSetAutorisations()) {
          {
            oprot.writeI32(struct.autorisations.size());
            for (java.util.Map.Entry<nl.earpi.generated.genericstruct.ActionEnum, nl.earpi.generated.autorisationstruct.Autorisation> _iter49 : struct.autorisations.entrySet())
            {
              oprot.writeI32(_iter49.getKey().getValue());
              _iter49.getValue().write(oprot);
            }
          }
        }
        if (struct.isSetTokenInput()) {
          struct.tokenInput.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, configureUserModule_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.uniquename = iprot.readString();
          struct.setUniquenameIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TMap _map50 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.autorisations = new java.util.HashMap<nl.earpi.generated.genericstruct.ActionEnum,nl.earpi.generated.autorisationstruct.Autorisation>(2*_map50.size);
            nl.earpi.generated.genericstruct.ActionEnum _key51;
            nl.earpi.generated.autorisationstruct.Autorisation _val52;
            for (int _i53 = 0; _i53 < _map50.size; ++_i53)
            {
              _key51 = nl.earpi.generated.genericstruct.ActionEnum.findByValue(iprot.readI32());
              _val52 = new nl.earpi.generated.autorisationstruct.Autorisation();
              _val52.read(iprot);
              struct.autorisations.put(_key51, _val52);
            }
          }
          struct.setAutorisationsIsSet(true);
        }
        if (incoming.get(2)) {
          struct.tokenInput = new EarPiAuthObject();
          struct.tokenInput.read(iprot);
          struct.setTokenInputIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class configureUserModule_result implements org.apache.thrift.TBase<configureUserModule_result, configureUserModule_result._Fields>, java.io.Serializable, Cloneable, Comparable<configureUserModule_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("configureUserModule_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField FAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("fail", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new configureUserModule_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new configureUserModule_resultTupleSchemeFactory();

    public java.lang.String success; // required
    public nl.earpi.generated.exception.LoginFailedException fail; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      FAIL((short)1, "fail");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // FAIL
            return FAIL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FAIL, new org.apache.thrift.meta_data.FieldMetaData("fail", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, nl.earpi.generated.exception.LoginFailedException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(configureUserModule_result.class, metaDataMap);
    }

    public configureUserModule_result() {
    }

    public configureUserModule_result(
      java.lang.String success,
      nl.earpi.generated.exception.LoginFailedException fail)
    {
      this();
      this.success = success;
      this.fail = fail;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public configureUserModule_result(configureUserModule_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetFail()) {
        this.fail = new nl.earpi.generated.exception.LoginFailedException(other.fail);
      }
    }

    public configureUserModule_result deepCopy() {
      return new configureUserModule_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.fail = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public configureUserModule_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public nl.earpi.generated.exception.LoginFailedException getFail() {
      return this.fail;
    }

    public configureUserModule_result setFail(nl.earpi.generated.exception.LoginFailedException fail) {
      this.fail = fail;
      return this;
    }

    public void unsetFail() {
      this.fail = null;
    }

    /** Returns true if field fail is set (has been assigned a value) and false otherwise */
    public boolean isSetFail() {
      return this.fail != null;
    }

    public void setFailIsSet(boolean value) {
      if (!value) {
        this.fail = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case FAIL:
        if (value == null) {
          unsetFail();
        } else {
          setFail((nl.earpi.generated.exception.LoginFailedException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case FAIL:
        return getFail();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case FAIL:
        return isSetFail();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof configureUserModule_result)
        return this.equals((configureUserModule_result)that);
      return false;
    }

    public boolean equals(configureUserModule_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_fail = true && this.isSetFail();
      boolean that_present_fail = true && that.isSetFail();
      if (this_present_fail || that_present_fail) {
        if (!(this_present_fail && that_present_fail))
          return false;
        if (!this.fail.equals(that.fail))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetFail()) ? 131071 : 524287);
      if (isSetFail())
        hashCode = hashCode * 8191 + fail.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(configureUserModule_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFail()).compareTo(other.isSetFail());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFail()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fail, other.fail);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("configureUserModule_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fail:");
      if (this.fail == null) {
        sb.append("null");
      } else {
        sb.append(this.fail);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class configureUserModule_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public configureUserModule_resultStandardScheme getScheme() {
        return new configureUserModule_resultStandardScheme();
      }
    }

    private static class configureUserModule_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<configureUserModule_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, configureUserModule_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // FAIL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.fail = new nl.earpi.generated.exception.LoginFailedException();
                struct.fail.read(iprot);
                struct.setFailIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, configureUserModule_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.fail != null) {
          oprot.writeFieldBegin(FAIL_FIELD_DESC);
          struct.fail.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class configureUserModule_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public configureUserModule_resultTupleScheme getScheme() {
        return new configureUserModule_resultTupleScheme();
      }
    }

    private static class configureUserModule_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<configureUserModule_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, configureUserModule_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetFail()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetFail()) {
          struct.fail.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, configureUserModule_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fail = new nl.earpi.generated.exception.LoginFailedException();
          struct.fail.read(iprot);
          struct.setFailIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class configureModuleSettings_args implements org.apache.thrift.TBase<configureModuleSettings_args, configureModuleSettings_args._Fields>, java.io.Serializable, Cloneable, Comparable<configureModuleSettings_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("configureModuleSettings_args");

    private static final org.apache.thrift.protocol.TField UNIQUENAME_FIELD_DESC = new org.apache.thrift.protocol.TField("uniquename", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ACTION_FIELD_DESC = new org.apache.thrift.protocol.TField("action", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField MODULE_CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("module_config", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField TOKEN_INPUT_FIELD_DESC = new org.apache.thrift.protocol.TField("tokenInput", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new configureModuleSettings_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new configureModuleSettings_argsTupleSchemeFactory();

    public java.lang.String uniquename; // required
    /**
     * 
     * @see nl.earpi.generated.genericstruct.ActionEnum
     */
    public nl.earpi.generated.genericstruct.ActionEnum action; // required
    public java.nio.ByteBuffer module_config; // required
    public EarPiAuthObject tokenInput; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UNIQUENAME((short)1, "uniquename"),
      /**
       * 
       * @see nl.earpi.generated.genericstruct.ActionEnum
       */
      ACTION((short)2, "action"),
      MODULE_CONFIG((short)3, "module_config"),
      TOKEN_INPUT((short)4, "tokenInput");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UNIQUENAME
            return UNIQUENAME;
          case 2: // ACTION
            return ACTION;
          case 3: // MODULE_CONFIG
            return MODULE_CONFIG;
          case 4: // TOKEN_INPUT
            return TOKEN_INPUT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UNIQUENAME, new org.apache.thrift.meta_data.FieldMetaData("uniquename", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ACTION, new org.apache.thrift.meta_data.FieldMetaData("action", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, nl.earpi.generated.genericstruct.ActionEnum.class)));
      tmpMap.put(_Fields.MODULE_CONFIG, new org.apache.thrift.meta_data.FieldMetaData("module_config", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.TOKEN_INPUT, new org.apache.thrift.meta_data.FieldMetaData("tokenInput", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EarPiAuthObject.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(configureModuleSettings_args.class, metaDataMap);
    }

    public configureModuleSettings_args() {
    }

    public configureModuleSettings_args(
      java.lang.String uniquename,
      nl.earpi.generated.genericstruct.ActionEnum action,
      java.nio.ByteBuffer module_config,
      EarPiAuthObject tokenInput)
    {
      this();
      this.uniquename = uniquename;
      this.action = action;
      this.module_config = org.apache.thrift.TBaseHelper.copyBinary(module_config);
      this.tokenInput = tokenInput;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public configureModuleSettings_args(configureModuleSettings_args other) {
      if (other.isSetUniquename()) {
        this.uniquename = other.uniquename;
      }
      if (other.isSetAction()) {
        this.action = other.action;
      }
      if (other.isSetModule_config()) {
        this.module_config = org.apache.thrift.TBaseHelper.copyBinary(other.module_config);
      }
      if (other.isSetTokenInput()) {
        this.tokenInput = new EarPiAuthObject(other.tokenInput);
      }
    }

    public configureModuleSettings_args deepCopy() {
      return new configureModuleSettings_args(this);
    }

    @Override
    public void clear() {
      this.uniquename = null;
      this.action = null;
      this.module_config = null;
      this.tokenInput = null;
    }

    public java.lang.String getUniquename() {
      return this.uniquename;
    }

    public configureModuleSettings_args setUniquename(java.lang.String uniquename) {
      this.uniquename = uniquename;
      return this;
    }

    public void unsetUniquename() {
      this.uniquename = null;
    }

    /** Returns true if field uniquename is set (has been assigned a value) and false otherwise */
    public boolean isSetUniquename() {
      return this.uniquename != null;
    }

    public void setUniquenameIsSet(boolean value) {
      if (!value) {
        this.uniquename = null;
      }
    }

    /**
     * 
     * @see nl.earpi.generated.genericstruct.ActionEnum
     */
    public nl.earpi.generated.genericstruct.ActionEnum getAction() {
      return this.action;
    }

    /**
     * 
     * @see nl.earpi.generated.genericstruct.ActionEnum
     */
    public configureModuleSettings_args setAction(nl.earpi.generated.genericstruct.ActionEnum action) {
      this.action = action;
      return this;
    }

    public void unsetAction() {
      this.action = null;
    }

    /** Returns true if field action is set (has been assigned a value) and false otherwise */
    public boolean isSetAction() {
      return this.action != null;
    }

    public void setActionIsSet(boolean value) {
      if (!value) {
        this.action = null;
      }
    }

    public byte[] getModule_config() {
      setModule_config(org.apache.thrift.TBaseHelper.rightSize(module_config));
      return module_config == null ? null : module_config.array();
    }

    public java.nio.ByteBuffer bufferForModule_config() {
      return org.apache.thrift.TBaseHelper.copyBinary(module_config);
    }

    public configureModuleSettings_args setModule_config(byte[] module_config) {
      this.module_config = module_config == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(module_config.clone());
      return this;
    }

    public configureModuleSettings_args setModule_config(java.nio.ByteBuffer module_config) {
      this.module_config = org.apache.thrift.TBaseHelper.copyBinary(module_config);
      return this;
    }

    public void unsetModule_config() {
      this.module_config = null;
    }

    /** Returns true if field module_config is set (has been assigned a value) and false otherwise */
    public boolean isSetModule_config() {
      return this.module_config != null;
    }

    public void setModule_configIsSet(boolean value) {
      if (!value) {
        this.module_config = null;
      }
    }

    public EarPiAuthObject getTokenInput() {
      return this.tokenInput;
    }

    public configureModuleSettings_args setTokenInput(EarPiAuthObject tokenInput) {
      this.tokenInput = tokenInput;
      return this;
    }

    public void unsetTokenInput() {
      this.tokenInput = null;
    }

    /** Returns true if field tokenInput is set (has been assigned a value) and false otherwise */
    public boolean isSetTokenInput() {
      return this.tokenInput != null;
    }

    public void setTokenInputIsSet(boolean value) {
      if (!value) {
        this.tokenInput = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case UNIQUENAME:
        if (value == null) {
          unsetUniquename();
        } else {
          setUniquename((java.lang.String)value);
        }
        break;

      case ACTION:
        if (value == null) {
          unsetAction();
        } else {
          setAction((nl.earpi.generated.genericstruct.ActionEnum)value);
        }
        break;

      case MODULE_CONFIG:
        if (value == null) {
          unsetModule_config();
        } else {
          if (value instanceof byte[]) {
            setModule_config((byte[])value);
          } else {
            setModule_config((java.nio.ByteBuffer)value);
          }
        }
        break;

      case TOKEN_INPUT:
        if (value == null) {
          unsetTokenInput();
        } else {
          setTokenInput((EarPiAuthObject)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case UNIQUENAME:
        return getUniquename();

      case ACTION:
        return getAction();

      case MODULE_CONFIG:
        return getModule_config();

      case TOKEN_INPUT:
        return getTokenInput();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case UNIQUENAME:
        return isSetUniquename();
      case ACTION:
        return isSetAction();
      case MODULE_CONFIG:
        return isSetModule_config();
      case TOKEN_INPUT:
        return isSetTokenInput();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof configureModuleSettings_args)
        return this.equals((configureModuleSettings_args)that);
      return false;
    }

    public boolean equals(configureModuleSettings_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_uniquename = true && this.isSetUniquename();
      boolean that_present_uniquename = true && that.isSetUniquename();
      if (this_present_uniquename || that_present_uniquename) {
        if (!(this_present_uniquename && that_present_uniquename))
          return false;
        if (!this.uniquename.equals(that.uniquename))
          return false;
      }

      boolean this_present_action = true && this.isSetAction();
      boolean that_present_action = true && that.isSetAction();
      if (this_present_action || that_present_action) {
        if (!(this_present_action && that_present_action))
          return false;
        if (!this.action.equals(that.action))
          return false;
      }

      boolean this_present_module_config = true && this.isSetModule_config();
      boolean that_present_module_config = true && that.isSetModule_config();
      if (this_present_module_config || that_present_module_config) {
        if (!(this_present_module_config && that_present_module_config))
          return false;
        if (!this.module_config.equals(that.module_config))
          return false;
      }

      boolean this_present_tokenInput = true && this.isSetTokenInput();
      boolean that_present_tokenInput = true && that.isSetTokenInput();
      if (this_present_tokenInput || that_present_tokenInput) {
        if (!(this_present_tokenInput && that_present_tokenInput))
          return false;
        if (!this.tokenInput.equals(that.tokenInput))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetUniquename()) ? 131071 : 524287);
      if (isSetUniquename())
        hashCode = hashCode * 8191 + uniquename.hashCode();

      hashCode = hashCode * 8191 + ((isSetAction()) ? 131071 : 524287);
      if (isSetAction())
        hashCode = hashCode * 8191 + action.getValue();

      hashCode = hashCode * 8191 + ((isSetModule_config()) ? 131071 : 524287);
      if (isSetModule_config())
        hashCode = hashCode * 8191 + module_config.hashCode();

      hashCode = hashCode * 8191 + ((isSetTokenInput()) ? 131071 : 524287);
      if (isSetTokenInput())
        hashCode = hashCode * 8191 + tokenInput.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(configureModuleSettings_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetUniquename()).compareTo(other.isSetUniquename());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUniquename()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uniquename, other.uniquename);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAction()).compareTo(other.isSetAction());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAction()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.action, other.action);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetModule_config()).compareTo(other.isSetModule_config());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetModule_config()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.module_config, other.module_config);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTokenInput()).compareTo(other.isSetTokenInput());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTokenInput()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tokenInput, other.tokenInput);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("configureModuleSettings_args(");
      boolean first = true;

      sb.append("uniquename:");
      if (this.uniquename == null) {
        sb.append("null");
      } else {
        sb.append(this.uniquename);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("action:");
      if (this.action == null) {
        sb.append("null");
      } else {
        sb.append(this.action);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("module_config:");
      if (this.module_config == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.module_config, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tokenInput:");
      if (this.tokenInput == null) {
        sb.append("null");
      } else {
        sb.append(this.tokenInput);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (tokenInput != null) {
        tokenInput.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class configureModuleSettings_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public configureModuleSettings_argsStandardScheme getScheme() {
        return new configureModuleSettings_argsStandardScheme();
      }
    }

    private static class configureModuleSettings_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<configureModuleSettings_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, configureModuleSettings_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UNIQUENAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.uniquename = iprot.readString();
                struct.setUniquenameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACTION
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.action = nl.earpi.generated.genericstruct.ActionEnum.findByValue(iprot.readI32());
                struct.setActionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MODULE_CONFIG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.module_config = iprot.readBinary();
                struct.setModule_configIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TOKEN_INPUT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tokenInput = new EarPiAuthObject();
                struct.tokenInput.read(iprot);
                struct.setTokenInputIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, configureModuleSettings_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.uniquename != null) {
          oprot.writeFieldBegin(UNIQUENAME_FIELD_DESC);
          oprot.writeString(struct.uniquename);
          oprot.writeFieldEnd();
        }
        if (struct.action != null) {
          oprot.writeFieldBegin(ACTION_FIELD_DESC);
          oprot.writeI32(struct.action.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.module_config != null) {
          oprot.writeFieldBegin(MODULE_CONFIG_FIELD_DESC);
          oprot.writeBinary(struct.module_config);
          oprot.writeFieldEnd();
        }
        if (struct.tokenInput != null) {
          oprot.writeFieldBegin(TOKEN_INPUT_FIELD_DESC);
          struct.tokenInput.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class configureModuleSettings_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public configureModuleSettings_argsTupleScheme getScheme() {
        return new configureModuleSettings_argsTupleScheme();
      }
    }

    private static class configureModuleSettings_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<configureModuleSettings_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, configureModuleSettings_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUniquename()) {
          optionals.set(0);
        }
        if (struct.isSetAction()) {
          optionals.set(1);
        }
        if (struct.isSetModule_config()) {
          optionals.set(2);
        }
        if (struct.isSetTokenInput()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetUniquename()) {
          oprot.writeString(struct.uniquename);
        }
        if (struct.isSetAction()) {
          oprot.writeI32(struct.action.getValue());
        }
        if (struct.isSetModule_config()) {
          oprot.writeBinary(struct.module_config);
        }
        if (struct.isSetTokenInput()) {
          struct.tokenInput.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, configureModuleSettings_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.uniquename = iprot.readString();
          struct.setUniquenameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.action = nl.earpi.generated.genericstruct.ActionEnum.findByValue(iprot.readI32());
          struct.setActionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.module_config = iprot.readBinary();
          struct.setModule_configIsSet(true);
        }
        if (incoming.get(3)) {
          struct.tokenInput = new EarPiAuthObject();
          struct.tokenInput.read(iprot);
          struct.setTokenInputIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class configureModuleSettings_result implements org.apache.thrift.TBase<configureModuleSettings_result, configureModuleSettings_result._Fields>, java.io.Serializable, Cloneable, Comparable<configureModuleSettings_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("configureModuleSettings_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField FAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("fail", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new configureModuleSettings_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new configureModuleSettings_resultTupleSchemeFactory();

    public java.lang.String success; // required
    public nl.earpi.generated.exception.LoginFailedException fail; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      FAIL((short)1, "fail");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // FAIL
            return FAIL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FAIL, new org.apache.thrift.meta_data.FieldMetaData("fail", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, nl.earpi.generated.exception.LoginFailedException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(configureModuleSettings_result.class, metaDataMap);
    }

    public configureModuleSettings_result() {
    }

    public configureModuleSettings_result(
      java.lang.String success,
      nl.earpi.generated.exception.LoginFailedException fail)
    {
      this();
      this.success = success;
      this.fail = fail;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public configureModuleSettings_result(configureModuleSettings_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetFail()) {
        this.fail = new nl.earpi.generated.exception.LoginFailedException(other.fail);
      }
    }

    public configureModuleSettings_result deepCopy() {
      return new configureModuleSettings_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.fail = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public configureModuleSettings_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public nl.earpi.generated.exception.LoginFailedException getFail() {
      return this.fail;
    }

    public configureModuleSettings_result setFail(nl.earpi.generated.exception.LoginFailedException fail) {
      this.fail = fail;
      return this;
    }

    public void unsetFail() {
      this.fail = null;
    }

    /** Returns true if field fail is set (has been assigned a value) and false otherwise */
    public boolean isSetFail() {
      return this.fail != null;
    }

    public void setFailIsSet(boolean value) {
      if (!value) {
        this.fail = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case FAIL:
        if (value == null) {
          unsetFail();
        } else {
          setFail((nl.earpi.generated.exception.LoginFailedException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case FAIL:
        return getFail();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case FAIL:
        return isSetFail();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof configureModuleSettings_result)
        return this.equals((configureModuleSettings_result)that);
      return false;
    }

    public boolean equals(configureModuleSettings_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_fail = true && this.isSetFail();
      boolean that_present_fail = true && that.isSetFail();
      if (this_present_fail || that_present_fail) {
        if (!(this_present_fail && that_present_fail))
          return false;
        if (!this.fail.equals(that.fail))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetFail()) ? 131071 : 524287);
      if (isSetFail())
        hashCode = hashCode * 8191 + fail.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(configureModuleSettings_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFail()).compareTo(other.isSetFail());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFail()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fail, other.fail);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("configureModuleSettings_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fail:");
      if (this.fail == null) {
        sb.append("null");
      } else {
        sb.append(this.fail);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class configureModuleSettings_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public configureModuleSettings_resultStandardScheme getScheme() {
        return new configureModuleSettings_resultStandardScheme();
      }
    }

    private static class configureModuleSettings_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<configureModuleSettings_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, configureModuleSettings_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // FAIL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.fail = new nl.earpi.generated.exception.LoginFailedException();
                struct.fail.read(iprot);
                struct.setFailIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, configureModuleSettings_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.fail != null) {
          oprot.writeFieldBegin(FAIL_FIELD_DESC);
          struct.fail.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class configureModuleSettings_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public configureModuleSettings_resultTupleScheme getScheme() {
        return new configureModuleSettings_resultTupleScheme();
      }
    }

    private static class configureModuleSettings_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<configureModuleSettings_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, configureModuleSettings_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetFail()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetFail()) {
          struct.fail.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, configureModuleSettings_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fail = new nl.earpi.generated.exception.LoginFailedException();
          struct.fail.read(iprot);
          struct.setFailIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getDeviceList_args implements org.apache.thrift.TBase<getDeviceList_args, getDeviceList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getDeviceList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDeviceList_args");

    private static final org.apache.thrift.protocol.TField TOKEN_INPUT_FIELD_DESC = new org.apache.thrift.protocol.TField("tokenInput", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getDeviceList_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getDeviceList_argsTupleSchemeFactory();

    public EarPiAuthObject tokenInput; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN_INPUT((short)1, "tokenInput");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN_INPUT
            return TOKEN_INPUT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN_INPUT, new org.apache.thrift.meta_data.FieldMetaData("tokenInput", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EarPiAuthObject.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDeviceList_args.class, metaDataMap);
    }

    public getDeviceList_args() {
    }

    public getDeviceList_args(
      EarPiAuthObject tokenInput)
    {
      this();
      this.tokenInput = tokenInput;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDeviceList_args(getDeviceList_args other) {
      if (other.isSetTokenInput()) {
        this.tokenInput = new EarPiAuthObject(other.tokenInput);
      }
    }

    public getDeviceList_args deepCopy() {
      return new getDeviceList_args(this);
    }

    @Override
    public void clear() {
      this.tokenInput = null;
    }

    public EarPiAuthObject getTokenInput() {
      return this.tokenInput;
    }

    public getDeviceList_args setTokenInput(EarPiAuthObject tokenInput) {
      this.tokenInput = tokenInput;
      return this;
    }

    public void unsetTokenInput() {
      this.tokenInput = null;
    }

    /** Returns true if field tokenInput is set (has been assigned a value) and false otherwise */
    public boolean isSetTokenInput() {
      return this.tokenInput != null;
    }

    public void setTokenInputIsSet(boolean value) {
      if (!value) {
        this.tokenInput = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case TOKEN_INPUT:
        if (value == null) {
          unsetTokenInput();
        } else {
          setTokenInput((EarPiAuthObject)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN_INPUT:
        return getTokenInput();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TOKEN_INPUT:
        return isSetTokenInput();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getDeviceList_args)
        return this.equals((getDeviceList_args)that);
      return false;
    }

    public boolean equals(getDeviceList_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_tokenInput = true && this.isSetTokenInput();
      boolean that_present_tokenInput = true && that.isSetTokenInput();
      if (this_present_tokenInput || that_present_tokenInput) {
        if (!(this_present_tokenInput && that_present_tokenInput))
          return false;
        if (!this.tokenInput.equals(that.tokenInput))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTokenInput()) ? 131071 : 524287);
      if (isSetTokenInput())
        hashCode = hashCode * 8191 + tokenInput.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getDeviceList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTokenInput()).compareTo(other.isSetTokenInput());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTokenInput()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tokenInput, other.tokenInput);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getDeviceList_args(");
      boolean first = true;

      sb.append("tokenInput:");
      if (this.tokenInput == null) {
        sb.append("null");
      } else {
        sb.append(this.tokenInput);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (tokenInput != null) {
        tokenInput.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDeviceList_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDeviceList_argsStandardScheme getScheme() {
        return new getDeviceList_argsStandardScheme();
      }
    }

    private static class getDeviceList_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getDeviceList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDeviceList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN_INPUT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tokenInput = new EarPiAuthObject();
                struct.tokenInput.read(iprot);
                struct.setTokenInputIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDeviceList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tokenInput != null) {
          oprot.writeFieldBegin(TOKEN_INPUT_FIELD_DESC);
          struct.tokenInput.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDeviceList_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDeviceList_argsTupleScheme getScheme() {
        return new getDeviceList_argsTupleScheme();
      }
    }

    private static class getDeviceList_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getDeviceList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDeviceList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTokenInput()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTokenInput()) {
          struct.tokenInput.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDeviceList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.tokenInput = new EarPiAuthObject();
          struct.tokenInput.read(iprot);
          struct.setTokenInputIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getDeviceList_result implements org.apache.thrift.TBase<getDeviceList_result, getDeviceList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getDeviceList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDeviceList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField FAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("fail", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getDeviceList_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getDeviceList_resultTupleSchemeFactory();

    public DeviceListOutput success; // required
    public nl.earpi.generated.exception.LoginFailedException fail; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      FAIL((short)1, "fail");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // FAIL
            return FAIL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DeviceListOutput.class)));
      tmpMap.put(_Fields.FAIL, new org.apache.thrift.meta_data.FieldMetaData("fail", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, nl.earpi.generated.exception.LoginFailedException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDeviceList_result.class, metaDataMap);
    }

    public getDeviceList_result() {
    }

    public getDeviceList_result(
      DeviceListOutput success,
      nl.earpi.generated.exception.LoginFailedException fail)
    {
      this();
      this.success = success;
      this.fail = fail;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDeviceList_result(getDeviceList_result other) {
      if (other.isSetSuccess()) {
        this.success = new DeviceListOutput(other.success);
      }
      if (other.isSetFail()) {
        this.fail = new nl.earpi.generated.exception.LoginFailedException(other.fail);
      }
    }

    public getDeviceList_result deepCopy() {
      return new getDeviceList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.fail = null;
    }

    public DeviceListOutput getSuccess() {
      return this.success;
    }

    public getDeviceList_result setSuccess(DeviceListOutput success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public nl.earpi.generated.exception.LoginFailedException getFail() {
      return this.fail;
    }

    public getDeviceList_result setFail(nl.earpi.generated.exception.LoginFailedException fail) {
      this.fail = fail;
      return this;
    }

    public void unsetFail() {
      this.fail = null;
    }

    /** Returns true if field fail is set (has been assigned a value) and false otherwise */
    public boolean isSetFail() {
      return this.fail != null;
    }

    public void setFailIsSet(boolean value) {
      if (!value) {
        this.fail = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((DeviceListOutput)value);
        }
        break;

      case FAIL:
        if (value == null) {
          unsetFail();
        } else {
          setFail((nl.earpi.generated.exception.LoginFailedException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case FAIL:
        return getFail();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case FAIL:
        return isSetFail();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getDeviceList_result)
        return this.equals((getDeviceList_result)that);
      return false;
    }

    public boolean equals(getDeviceList_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_fail = true && this.isSetFail();
      boolean that_present_fail = true && that.isSetFail();
      if (this_present_fail || that_present_fail) {
        if (!(this_present_fail && that_present_fail))
          return false;
        if (!this.fail.equals(that.fail))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetFail()) ? 131071 : 524287);
      if (isSetFail())
        hashCode = hashCode * 8191 + fail.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getDeviceList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFail()).compareTo(other.isSetFail());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFail()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fail, other.fail);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getDeviceList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fail:");
      if (this.fail == null) {
        sb.append("null");
      } else {
        sb.append(this.fail);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDeviceList_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDeviceList_resultStandardScheme getScheme() {
        return new getDeviceList_resultStandardScheme();
      }
    }

    private static class getDeviceList_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getDeviceList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDeviceList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new DeviceListOutput();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // FAIL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.fail = new nl.earpi.generated.exception.LoginFailedException();
                struct.fail.read(iprot);
                struct.setFailIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDeviceList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.fail != null) {
          oprot.writeFieldBegin(FAIL_FIELD_DESC);
          struct.fail.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDeviceList_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDeviceList_resultTupleScheme getScheme() {
        return new getDeviceList_resultTupleScheme();
      }
    }

    private static class getDeviceList_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getDeviceList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDeviceList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetFail()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetFail()) {
          struct.fail.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDeviceList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new DeviceListOutput();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fail = new nl.earpi.generated.exception.LoginFailedException();
          struct.fail.read(iprot);
          struct.setFailIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class confirmDevice_args implements org.apache.thrift.TBase<confirmDevice_args, confirmDevice_args._Fields>, java.io.Serializable, Cloneable, Comparable<confirmDevice_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("confirmDevice_args");

    private static final org.apache.thrift.protocol.TField DEVICE_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceToken", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ACTIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("active", org.apache.thrift.protocol.TType.BOOL, (short)2);
    private static final org.apache.thrift.protocol.TField TOKEN_INPUT_FIELD_DESC = new org.apache.thrift.protocol.TField("tokenInput", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new confirmDevice_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new confirmDevice_argsTupleSchemeFactory();

    public java.lang.String deviceToken; // required
    public boolean active; // required
    public EarPiAuthObject tokenInput; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEVICE_TOKEN((short)1, "deviceToken"),
      ACTIVE((short)2, "active"),
      TOKEN_INPUT((short)3, "tokenInput");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEVICE_TOKEN
            return DEVICE_TOKEN;
          case 2: // ACTIVE
            return ACTIVE;
          case 3: // TOKEN_INPUT
            return TOKEN_INPUT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ACTIVE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEVICE_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("deviceToken", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ACTIVE, new org.apache.thrift.meta_data.FieldMetaData("active", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.TOKEN_INPUT, new org.apache.thrift.meta_data.FieldMetaData("tokenInput", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EarPiAuthObject.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(confirmDevice_args.class, metaDataMap);
    }

    public confirmDevice_args() {
    }

    public confirmDevice_args(
      java.lang.String deviceToken,
      boolean active,
      EarPiAuthObject tokenInput)
    {
      this();
      this.deviceToken = deviceToken;
      this.active = active;
      setActiveIsSet(true);
      this.tokenInput = tokenInput;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public confirmDevice_args(confirmDevice_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetDeviceToken()) {
        this.deviceToken = other.deviceToken;
      }
      this.active = other.active;
      if (other.isSetTokenInput()) {
        this.tokenInput = new EarPiAuthObject(other.tokenInput);
      }
    }

    public confirmDevice_args deepCopy() {
      return new confirmDevice_args(this);
    }

    @Override
    public void clear() {
      this.deviceToken = null;
      setActiveIsSet(false);
      this.active = false;
      this.tokenInput = null;
    }

    public java.lang.String getDeviceToken() {
      return this.deviceToken;
    }

    public confirmDevice_args setDeviceToken(java.lang.String deviceToken) {
      this.deviceToken = deviceToken;
      return this;
    }

    public void unsetDeviceToken() {
      this.deviceToken = null;
    }

    /** Returns true if field deviceToken is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceToken() {
      return this.deviceToken != null;
    }

    public void setDeviceTokenIsSet(boolean value) {
      if (!value) {
        this.deviceToken = null;
      }
    }

    public boolean isActive() {
      return this.active;
    }

    public confirmDevice_args setActive(boolean active) {
      this.active = active;
      setActiveIsSet(true);
      return this;
    }

    public void unsetActive() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ACTIVE_ISSET_ID);
    }

    /** Returns true if field active is set (has been assigned a value) and false otherwise */
    public boolean isSetActive() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ACTIVE_ISSET_ID);
    }

    public void setActiveIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ACTIVE_ISSET_ID, value);
    }

    public EarPiAuthObject getTokenInput() {
      return this.tokenInput;
    }

    public confirmDevice_args setTokenInput(EarPiAuthObject tokenInput) {
      this.tokenInput = tokenInput;
      return this;
    }

    public void unsetTokenInput() {
      this.tokenInput = null;
    }

    /** Returns true if field tokenInput is set (has been assigned a value) and false otherwise */
    public boolean isSetTokenInput() {
      return this.tokenInput != null;
    }

    public void setTokenInputIsSet(boolean value) {
      if (!value) {
        this.tokenInput = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case DEVICE_TOKEN:
        if (value == null) {
          unsetDeviceToken();
        } else {
          setDeviceToken((java.lang.String)value);
        }
        break;

      case ACTIVE:
        if (value == null) {
          unsetActive();
        } else {
          setActive((java.lang.Boolean)value);
        }
        break;

      case TOKEN_INPUT:
        if (value == null) {
          unsetTokenInput();
        } else {
          setTokenInput((EarPiAuthObject)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case DEVICE_TOKEN:
        return getDeviceToken();

      case ACTIVE:
        return isActive();

      case TOKEN_INPUT:
        return getTokenInput();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case DEVICE_TOKEN:
        return isSetDeviceToken();
      case ACTIVE:
        return isSetActive();
      case TOKEN_INPUT:
        return isSetTokenInput();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof confirmDevice_args)
        return this.equals((confirmDevice_args)that);
      return false;
    }

    public boolean equals(confirmDevice_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_deviceToken = true && this.isSetDeviceToken();
      boolean that_present_deviceToken = true && that.isSetDeviceToken();
      if (this_present_deviceToken || that_present_deviceToken) {
        if (!(this_present_deviceToken && that_present_deviceToken))
          return false;
        if (!this.deviceToken.equals(that.deviceToken))
          return false;
      }

      boolean this_present_active = true;
      boolean that_present_active = true;
      if (this_present_active || that_present_active) {
        if (!(this_present_active && that_present_active))
          return false;
        if (this.active != that.active)
          return false;
      }

      boolean this_present_tokenInput = true && this.isSetTokenInput();
      boolean that_present_tokenInput = true && that.isSetTokenInput();
      if (this_present_tokenInput || that_present_tokenInput) {
        if (!(this_present_tokenInput && that_present_tokenInput))
          return false;
        if (!this.tokenInput.equals(that.tokenInput))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetDeviceToken()) ? 131071 : 524287);
      if (isSetDeviceToken())
        hashCode = hashCode * 8191 + deviceToken.hashCode();

      hashCode = hashCode * 8191 + ((active) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetTokenInput()) ? 131071 : 524287);
      if (isSetTokenInput())
        hashCode = hashCode * 8191 + tokenInput.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(confirmDevice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetDeviceToken()).compareTo(other.isSetDeviceToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceToken, other.deviceToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetActive()).compareTo(other.isSetActive());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetActive()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.active, other.active);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTokenInput()).compareTo(other.isSetTokenInput());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTokenInput()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tokenInput, other.tokenInput);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("confirmDevice_args(");
      boolean first = true;

      sb.append("deviceToken:");
      if (this.deviceToken == null) {
        sb.append("null");
      } else {
        sb.append(this.deviceToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("active:");
      sb.append(this.active);
      first = false;
      if (!first) sb.append(", ");
      sb.append("tokenInput:");
      if (this.tokenInput == null) {
        sb.append("null");
      } else {
        sb.append(this.tokenInput);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (tokenInput != null) {
        tokenInput.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class confirmDevice_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public confirmDevice_argsStandardScheme getScheme() {
        return new confirmDevice_argsStandardScheme();
      }
    }

    private static class confirmDevice_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<confirmDevice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, confirmDevice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEVICE_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.deviceToken = iprot.readString();
                struct.setDeviceTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACTIVE
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.active = iprot.readBool();
                struct.setActiveIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TOKEN_INPUT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tokenInput = new EarPiAuthObject();
                struct.tokenInput.read(iprot);
                struct.setTokenInputIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, confirmDevice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.deviceToken != null) {
          oprot.writeFieldBegin(DEVICE_TOKEN_FIELD_DESC);
          oprot.writeString(struct.deviceToken);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ACTIVE_FIELD_DESC);
        oprot.writeBool(struct.active);
        oprot.writeFieldEnd();
        if (struct.tokenInput != null) {
          oprot.writeFieldBegin(TOKEN_INPUT_FIELD_DESC);
          struct.tokenInput.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class confirmDevice_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public confirmDevice_argsTupleScheme getScheme() {
        return new confirmDevice_argsTupleScheme();
      }
    }

    private static class confirmDevice_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<confirmDevice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, confirmDevice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetDeviceToken()) {
          optionals.set(0);
        }
        if (struct.isSetActive()) {
          optionals.set(1);
        }
        if (struct.isSetTokenInput()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetDeviceToken()) {
          oprot.writeString(struct.deviceToken);
        }
        if (struct.isSetActive()) {
          oprot.writeBool(struct.active);
        }
        if (struct.isSetTokenInput()) {
          struct.tokenInput.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, confirmDevice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.deviceToken = iprot.readString();
          struct.setDeviceTokenIsSet(true);
        }
        if (incoming.get(1)) {
          struct.active = iprot.readBool();
          struct.setActiveIsSet(true);
        }
        if (incoming.get(2)) {
          struct.tokenInput = new EarPiAuthObject();
          struct.tokenInput.read(iprot);
          struct.setTokenInputIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class confirmDevice_result implements org.apache.thrift.TBase<confirmDevice_result, confirmDevice_result._Fields>, java.io.Serializable, Cloneable, Comparable<confirmDevice_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("confirmDevice_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField FAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("fail", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new confirmDevice_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new confirmDevice_resultTupleSchemeFactory();

    public java.lang.String success; // required
    public nl.earpi.generated.exception.LoginFailedException fail; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      FAIL((short)1, "fail");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // FAIL
            return FAIL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FAIL, new org.apache.thrift.meta_data.FieldMetaData("fail", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, nl.earpi.generated.exception.LoginFailedException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(confirmDevice_result.class, metaDataMap);
    }

    public confirmDevice_result() {
    }

    public confirmDevice_result(
      java.lang.String success,
      nl.earpi.generated.exception.LoginFailedException fail)
    {
      this();
      this.success = success;
      this.fail = fail;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public confirmDevice_result(confirmDevice_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetFail()) {
        this.fail = new nl.earpi.generated.exception.LoginFailedException(other.fail);
      }
    }

    public confirmDevice_result deepCopy() {
      return new confirmDevice_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.fail = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public confirmDevice_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public nl.earpi.generated.exception.LoginFailedException getFail() {
      return this.fail;
    }

    public confirmDevice_result setFail(nl.earpi.generated.exception.LoginFailedException fail) {
      this.fail = fail;
      return this;
    }

    public void unsetFail() {
      this.fail = null;
    }

    /** Returns true if field fail is set (has been assigned a value) and false otherwise */
    public boolean isSetFail() {
      return this.fail != null;
    }

    public void setFailIsSet(boolean value) {
      if (!value) {
        this.fail = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case FAIL:
        if (value == null) {
          unsetFail();
        } else {
          setFail((nl.earpi.generated.exception.LoginFailedException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case FAIL:
        return getFail();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case FAIL:
        return isSetFail();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof confirmDevice_result)
        return this.equals((confirmDevice_result)that);
      return false;
    }

    public boolean equals(confirmDevice_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_fail = true && this.isSetFail();
      boolean that_present_fail = true && that.isSetFail();
      if (this_present_fail || that_present_fail) {
        if (!(this_present_fail && that_present_fail))
          return false;
        if (!this.fail.equals(that.fail))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetFail()) ? 131071 : 524287);
      if (isSetFail())
        hashCode = hashCode * 8191 + fail.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(confirmDevice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFail()).compareTo(other.isSetFail());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFail()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fail, other.fail);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("confirmDevice_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fail:");
      if (this.fail == null) {
        sb.append("null");
      } else {
        sb.append(this.fail);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class confirmDevice_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public confirmDevice_resultStandardScheme getScheme() {
        return new confirmDevice_resultStandardScheme();
      }
    }

    private static class confirmDevice_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<confirmDevice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, confirmDevice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // FAIL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.fail = new nl.earpi.generated.exception.LoginFailedException();
                struct.fail.read(iprot);
                struct.setFailIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, confirmDevice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.fail != null) {
          oprot.writeFieldBegin(FAIL_FIELD_DESC);
          struct.fail.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class confirmDevice_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public confirmDevice_resultTupleScheme getScheme() {
        return new confirmDevice_resultTupleScheme();
      }
    }

    private static class confirmDevice_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<confirmDevice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, confirmDevice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetFail()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetFail()) {
          struct.fail.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, confirmDevice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fail = new nl.earpi.generated.exception.LoginFailedException();
          struct.fail.read(iprot);
          struct.setFailIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class changePassword_args implements org.apache.thrift.TBase<changePassword_args, changePassword_args._Fields>, java.io.Serializable, Cloneable, Comparable<changePassword_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("changePassword_args");

    private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TOKEN_INPUT_FIELD_DESC = new org.apache.thrift.protocol.TField("tokenInput", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new changePassword_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new changePassword_argsTupleSchemeFactory();

    public java.lang.String username; // required
    public java.lang.String password; // required
    public EarPiAuthObject tokenInput; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERNAME((short)1, "username"),
      PASSWORD((short)2, "password"),
      TOKEN_INPUT((short)3, "tokenInput");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERNAME
            return USERNAME;
          case 2: // PASSWORD
            return PASSWORD;
          case 3: // TOKEN_INPUT
            return TOKEN_INPUT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TOKEN_INPUT, new org.apache.thrift.meta_data.FieldMetaData("tokenInput", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EarPiAuthObject.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(changePassword_args.class, metaDataMap);
    }

    public changePassword_args() {
    }

    public changePassword_args(
      java.lang.String username,
      java.lang.String password,
      EarPiAuthObject tokenInput)
    {
      this();
      this.username = username;
      this.password = password;
      this.tokenInput = tokenInput;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public changePassword_args(changePassword_args other) {
      if (other.isSetUsername()) {
        this.username = other.username;
      }
      if (other.isSetPassword()) {
        this.password = other.password;
      }
      if (other.isSetTokenInput()) {
        this.tokenInput = new EarPiAuthObject(other.tokenInput);
      }
    }

    public changePassword_args deepCopy() {
      return new changePassword_args(this);
    }

    @Override
    public void clear() {
      this.username = null;
      this.password = null;
      this.tokenInput = null;
    }

    public java.lang.String getUsername() {
      return this.username;
    }

    public changePassword_args setUsername(java.lang.String username) {
      this.username = username;
      return this;
    }

    public void unsetUsername() {
      this.username = null;
    }

    /** Returns true if field username is set (has been assigned a value) and false otherwise */
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    public java.lang.String getPassword() {
      return this.password;
    }

    public changePassword_args setPassword(java.lang.String password) {
      this.password = password;
      return this;
    }

    public void unsetPassword() {
      this.password = null;
    }

    /** Returns true if field password is set (has been assigned a value) and false otherwise */
    public boolean isSetPassword() {
      return this.password != null;
    }

    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }

    public EarPiAuthObject getTokenInput() {
      return this.tokenInput;
    }

    public changePassword_args setTokenInput(EarPiAuthObject tokenInput) {
      this.tokenInput = tokenInput;
      return this;
    }

    public void unsetTokenInput() {
      this.tokenInput = null;
    }

    /** Returns true if field tokenInput is set (has been assigned a value) and false otherwise */
    public boolean isSetTokenInput() {
      return this.tokenInput != null;
    }

    public void setTokenInputIsSet(boolean value) {
      if (!value) {
        this.tokenInput = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case USERNAME:
        if (value == null) {
          unsetUsername();
        } else {
          setUsername((java.lang.String)value);
        }
        break;

      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          setPassword((java.lang.String)value);
        }
        break;

      case TOKEN_INPUT:
        if (value == null) {
          unsetTokenInput();
        } else {
          setTokenInput((EarPiAuthObject)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case USERNAME:
        return getUsername();

      case PASSWORD:
        return getPassword();

      case TOKEN_INPUT:
        return getTokenInput();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case USERNAME:
        return isSetUsername();
      case PASSWORD:
        return isSetPassword();
      case TOKEN_INPUT:
        return isSetTokenInput();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof changePassword_args)
        return this.equals((changePassword_args)that);
      return false;
    }

    public boolean equals(changePassword_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!this.password.equals(that.password))
          return false;
      }

      boolean this_present_tokenInput = true && this.isSetTokenInput();
      boolean that_present_tokenInput = true && that.isSetTokenInput();
      if (this_present_tokenInput || that_present_tokenInput) {
        if (!(this_present_tokenInput && that_present_tokenInput))
          return false;
        if (!this.tokenInput.equals(that.tokenInput))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetUsername()) ? 131071 : 524287);
      if (isSetUsername())
        hashCode = hashCode * 8191 + username.hashCode();

      hashCode = hashCode * 8191 + ((isSetPassword()) ? 131071 : 524287);
      if (isSetPassword())
        hashCode = hashCode * 8191 + password.hashCode();

      hashCode = hashCode * 8191 + ((isSetTokenInput()) ? 131071 : 524287);
      if (isSetTokenInput())
        hashCode = hashCode * 8191 + tokenInput.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(changePassword_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTokenInput()).compareTo(other.isSetTokenInput());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTokenInput()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tokenInput, other.tokenInput);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("changePassword_args(");
      boolean first = true;

      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tokenInput:");
      if (this.tokenInput == null) {
        sb.append("null");
      } else {
        sb.append(this.tokenInput);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (tokenInput != null) {
        tokenInput.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class changePassword_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public changePassword_argsStandardScheme getScheme() {
        return new changePassword_argsStandardScheme();
      }
    }

    private static class changePassword_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<changePassword_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, changePassword_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.username = iprot.readString();
                struct.setUsernameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.password = iprot.readString();
                struct.setPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TOKEN_INPUT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tokenInput = new EarPiAuthObject();
                struct.tokenInput.read(iprot);
                struct.setTokenInputIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, changePassword_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.username != null) {
          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
          oprot.writeString(struct.username);
          oprot.writeFieldEnd();
        }
        if (struct.password != null) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
        if (struct.tokenInput != null) {
          oprot.writeFieldBegin(TOKEN_INPUT_FIELD_DESC);
          struct.tokenInput.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class changePassword_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public changePassword_argsTupleScheme getScheme() {
        return new changePassword_argsTupleScheme();
      }
    }

    private static class changePassword_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<changePassword_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, changePassword_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUsername()) {
          optionals.set(0);
        }
        if (struct.isSetPassword()) {
          optionals.set(1);
        }
        if (struct.isSetTokenInput()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUsername()) {
          oprot.writeString(struct.username);
        }
        if (struct.isSetPassword()) {
          oprot.writeString(struct.password);
        }
        if (struct.isSetTokenInput()) {
          struct.tokenInput.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, changePassword_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.username = iprot.readString();
          struct.setUsernameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.password = iprot.readString();
          struct.setPasswordIsSet(true);
        }
        if (incoming.get(2)) {
          struct.tokenInput = new EarPiAuthObject();
          struct.tokenInput.read(iprot);
          struct.setTokenInputIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class changePassword_result implements org.apache.thrift.TBase<changePassword_result, changePassword_result._Fields>, java.io.Serializable, Cloneable, Comparable<changePassword_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("changePassword_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField BAD_FIELD_DESC = new org.apache.thrift.protocol.TField("bad", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField FAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("fail", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new changePassword_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new changePassword_resultTupleSchemeFactory();

    public java.lang.String success; // required
    public nl.earpi.generated.exception.BadHashException bad; // required
    public nl.earpi.generated.exception.LoginFailedException fail; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BAD((short)1, "bad"),
      FAIL((short)2, "fail");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BAD
            return BAD;
          case 2: // FAIL
            return FAIL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BAD, new org.apache.thrift.meta_data.FieldMetaData("bad", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, nl.earpi.generated.exception.BadHashException.class)));
      tmpMap.put(_Fields.FAIL, new org.apache.thrift.meta_data.FieldMetaData("fail", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, nl.earpi.generated.exception.LoginFailedException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(changePassword_result.class, metaDataMap);
    }

    public changePassword_result() {
    }

    public changePassword_result(
      java.lang.String success,
      nl.earpi.generated.exception.BadHashException bad,
      nl.earpi.generated.exception.LoginFailedException fail)
    {
      this();
      this.success = success;
      this.bad = bad;
      this.fail = fail;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public changePassword_result(changePassword_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetBad()) {
        this.bad = new nl.earpi.generated.exception.BadHashException(other.bad);
      }
      if (other.isSetFail()) {
        this.fail = new nl.earpi.generated.exception.LoginFailedException(other.fail);
      }
    }

    public changePassword_result deepCopy() {
      return new changePassword_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.bad = null;
      this.fail = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public changePassword_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public nl.earpi.generated.exception.BadHashException getBad() {
      return this.bad;
    }

    public changePassword_result setBad(nl.earpi.generated.exception.BadHashException bad) {
      this.bad = bad;
      return this;
    }

    public void unsetBad() {
      this.bad = null;
    }

    /** Returns true if field bad is set (has been assigned a value) and false otherwise */
    public boolean isSetBad() {
      return this.bad != null;
    }

    public void setBadIsSet(boolean value) {
      if (!value) {
        this.bad = null;
      }
    }

    public nl.earpi.generated.exception.LoginFailedException getFail() {
      return this.fail;
    }

    public changePassword_result setFail(nl.earpi.generated.exception.LoginFailedException fail) {
      this.fail = fail;
      return this;
    }

    public void unsetFail() {
      this.fail = null;
    }

    /** Returns true if field fail is set (has been assigned a value) and false otherwise */
    public boolean isSetFail() {
      return this.fail != null;
    }

    public void setFailIsSet(boolean value) {
      if (!value) {
        this.fail = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case BAD:
        if (value == null) {
          unsetBad();
        } else {
          setBad((nl.earpi.generated.exception.BadHashException)value);
        }
        break;

      case FAIL:
        if (value == null) {
          unsetFail();
        } else {
          setFail((nl.earpi.generated.exception.LoginFailedException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BAD:
        return getBad();

      case FAIL:
        return getFail();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BAD:
        return isSetBad();
      case FAIL:
        return isSetFail();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof changePassword_result)
        return this.equals((changePassword_result)that);
      return false;
    }

    public boolean equals(changePassword_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_bad = true && this.isSetBad();
      boolean that_present_bad = true && that.isSetBad();
      if (this_present_bad || that_present_bad) {
        if (!(this_present_bad && that_present_bad))
          return false;
        if (!this.bad.equals(that.bad))
          return false;
      }

      boolean this_present_fail = true && this.isSetFail();
      boolean that_present_fail = true && that.isSetFail();
      if (this_present_fail || that_present_fail) {
        if (!(this_present_fail && that_present_fail))
          return false;
        if (!this.fail.equals(that.fail))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetBad()) ? 131071 : 524287);
      if (isSetBad())
        hashCode = hashCode * 8191 + bad.hashCode();

      hashCode = hashCode * 8191 + ((isSetFail()) ? 131071 : 524287);
      if (isSetFail())
        hashCode = hashCode * 8191 + fail.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(changePassword_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetBad()).compareTo(other.isSetBad());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBad()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bad, other.bad);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFail()).compareTo(other.isSetFail());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFail()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fail, other.fail);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("changePassword_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bad:");
      if (this.bad == null) {
        sb.append("null");
      } else {
        sb.append(this.bad);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fail:");
      if (this.fail == null) {
        sb.append("null");
      } else {
        sb.append(this.fail);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class changePassword_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public changePassword_resultStandardScheme getScheme() {
        return new changePassword_resultStandardScheme();
      }
    }

    private static class changePassword_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<changePassword_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, changePassword_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BAD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bad = new nl.earpi.generated.exception.BadHashException();
                struct.bad.read(iprot);
                struct.setBadIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FAIL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.fail = new nl.earpi.generated.exception.LoginFailedException();
                struct.fail.read(iprot);
                struct.setFailIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, changePassword_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.bad != null) {
          oprot.writeFieldBegin(BAD_FIELD_DESC);
          struct.bad.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.fail != null) {
          oprot.writeFieldBegin(FAIL_FIELD_DESC);
          struct.fail.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class changePassword_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public changePassword_resultTupleScheme getScheme() {
        return new changePassword_resultTupleScheme();
      }
    }

    private static class changePassword_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<changePassword_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, changePassword_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBad()) {
          optionals.set(1);
        }
        if (struct.isSetFail()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetBad()) {
          struct.bad.write(oprot);
        }
        if (struct.isSetFail()) {
          struct.fail.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, changePassword_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bad = new nl.earpi.generated.exception.BadHashException();
          struct.bad.read(iprot);
          struct.setBadIsSet(true);
        }
        if (incoming.get(2)) {
          struct.fail = new nl.earpi.generated.exception.LoginFailedException();
          struct.fail.read(iprot);
          struct.setFailIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
