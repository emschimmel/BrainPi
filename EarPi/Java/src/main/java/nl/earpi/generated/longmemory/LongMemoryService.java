/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package nl.earpi.generated.longmemory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-12-31")
public class LongMemoryService {

  public interface Iface {

    public nl.earpi.generated.autorisationstruct.Person loginCall(LongMemoryLoginInputObject loginobject) throws nl.earpi.generated.exception.BadHashException, nl.earpi.generated.exception.LoginFailedException, org.apache.thrift.TException;

    public nl.earpi.generated.autorisationstruct.Person getPersonConfig(java.lang.String uniquename) throws org.apache.thrift.TException;

    public java.util.List<nl.earpi.generated.autorisationstruct.Person> getAll() throws org.apache.thrift.TException;

    public void storeNewPerson(nl.earpi.generated.autorisationstruct.Person person) throws org.apache.thrift.TException;

    public void changePassword(java.lang.String username, java.lang.String password) throws nl.earpi.generated.exception.BadHashException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void loginCall(LongMemoryLoginInputObject loginobject, org.apache.thrift.async.AsyncMethodCallback<nl.earpi.generated.autorisationstruct.Person> resultHandler) throws org.apache.thrift.TException;

    public void getPersonConfig(java.lang.String uniquename, org.apache.thrift.async.AsyncMethodCallback<nl.earpi.generated.autorisationstruct.Person> resultHandler) throws org.apache.thrift.TException;

    public void getAll(org.apache.thrift.async.AsyncMethodCallback<java.util.List<nl.earpi.generated.autorisationstruct.Person>> resultHandler) throws org.apache.thrift.TException;

    public void storeNewPerson(nl.earpi.generated.autorisationstruct.Person person, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void changePassword(java.lang.String username, java.lang.String password, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public nl.earpi.generated.autorisationstruct.Person loginCall(LongMemoryLoginInputObject loginobject) throws nl.earpi.generated.exception.BadHashException, nl.earpi.generated.exception.LoginFailedException, org.apache.thrift.TException
    {
      send_loginCall(loginobject);
      return recv_loginCall();
    }

    public void send_loginCall(LongMemoryLoginInputObject loginobject) throws org.apache.thrift.TException
    {
      loginCall_args args = new loginCall_args();
      args.setLoginobject(loginobject);
      sendBase("loginCall", args);
    }

    public nl.earpi.generated.autorisationstruct.Person recv_loginCall() throws nl.earpi.generated.exception.BadHashException, nl.earpi.generated.exception.LoginFailedException, org.apache.thrift.TException
    {
      loginCall_result result = new loginCall_result();
      receiveBase(result, "loginCall");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.bad != null) {
        throw result.bad;
      }
      if (result.fail != null) {
        throw result.fail;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "loginCall failed: unknown result");
    }

    public nl.earpi.generated.autorisationstruct.Person getPersonConfig(java.lang.String uniquename) throws org.apache.thrift.TException
    {
      send_getPersonConfig(uniquename);
      return recv_getPersonConfig();
    }

    public void send_getPersonConfig(java.lang.String uniquename) throws org.apache.thrift.TException
    {
      getPersonConfig_args args = new getPersonConfig_args();
      args.setUniquename(uniquename);
      sendBase("getPersonConfig", args);
    }

    public nl.earpi.generated.autorisationstruct.Person recv_getPersonConfig() throws org.apache.thrift.TException
    {
      getPersonConfig_result result = new getPersonConfig_result();
      receiveBase(result, "getPersonConfig");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPersonConfig failed: unknown result");
    }

    public java.util.List<nl.earpi.generated.autorisationstruct.Person> getAll() throws org.apache.thrift.TException
    {
      send_getAll();
      return recv_getAll();
    }

    public void send_getAll() throws org.apache.thrift.TException
    {
      getAll_args args = new getAll_args();
      sendBase("getAll", args);
    }

    public java.util.List<nl.earpi.generated.autorisationstruct.Person> recv_getAll() throws org.apache.thrift.TException
    {
      getAll_result result = new getAll_result();
      receiveBase(result, "getAll");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAll failed: unknown result");
    }

    public void storeNewPerson(nl.earpi.generated.autorisationstruct.Person person) throws org.apache.thrift.TException
    {
      send_storeNewPerson(person);
      recv_storeNewPerson();
    }

    public void send_storeNewPerson(nl.earpi.generated.autorisationstruct.Person person) throws org.apache.thrift.TException
    {
      storeNewPerson_args args = new storeNewPerson_args();
      args.setPerson(person);
      sendBase("storeNewPerson", args);
    }

    public void recv_storeNewPerson() throws org.apache.thrift.TException
    {
      storeNewPerson_result result = new storeNewPerson_result();
      receiveBase(result, "storeNewPerson");
      return;
    }

    public void changePassword(java.lang.String username, java.lang.String password) throws nl.earpi.generated.exception.BadHashException, org.apache.thrift.TException
    {
      send_changePassword(username, password);
      recv_changePassword();
    }

    public void send_changePassword(java.lang.String username, java.lang.String password) throws org.apache.thrift.TException
    {
      changePassword_args args = new changePassword_args();
      args.setUsername(username);
      args.setPassword(password);
      sendBase("changePassword", args);
    }

    public void recv_changePassword() throws nl.earpi.generated.exception.BadHashException, org.apache.thrift.TException
    {
      changePassword_result result = new changePassword_result();
      receiveBase(result, "changePassword");
      if (result.badHashException != null) {
        throw result.badHashException;
      }
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void loginCall(LongMemoryLoginInputObject loginobject, org.apache.thrift.async.AsyncMethodCallback<nl.earpi.generated.autorisationstruct.Person> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      loginCall_call method_call = new loginCall_call(loginobject, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class loginCall_call extends org.apache.thrift.async.TAsyncMethodCall<nl.earpi.generated.autorisationstruct.Person> {
      private LongMemoryLoginInputObject loginobject;
      public loginCall_call(LongMemoryLoginInputObject loginobject, org.apache.thrift.async.AsyncMethodCallback<nl.earpi.generated.autorisationstruct.Person> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.loginobject = loginobject;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("loginCall", org.apache.thrift.protocol.TMessageType.CALL, 0));
        loginCall_args args = new loginCall_args();
        args.setLoginobject(loginobject);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public nl.earpi.generated.autorisationstruct.Person getResult() throws nl.earpi.generated.exception.BadHashException, nl.earpi.generated.exception.LoginFailedException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_loginCall();
      }
    }

    public void getPersonConfig(java.lang.String uniquename, org.apache.thrift.async.AsyncMethodCallback<nl.earpi.generated.autorisationstruct.Person> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPersonConfig_call method_call = new getPersonConfig_call(uniquename, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPersonConfig_call extends org.apache.thrift.async.TAsyncMethodCall<nl.earpi.generated.autorisationstruct.Person> {
      private java.lang.String uniquename;
      public getPersonConfig_call(java.lang.String uniquename, org.apache.thrift.async.AsyncMethodCallback<nl.earpi.generated.autorisationstruct.Person> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uniquename = uniquename;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPersonConfig", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPersonConfig_args args = new getPersonConfig_args();
        args.setUniquename(uniquename);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public nl.earpi.generated.autorisationstruct.Person getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPersonConfig();
      }
    }

    public void getAll(org.apache.thrift.async.AsyncMethodCallback<java.util.List<nl.earpi.generated.autorisationstruct.Person>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAll_call method_call = new getAll_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAll_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<nl.earpi.generated.autorisationstruct.Person>> {
      public getAll_call(org.apache.thrift.async.AsyncMethodCallback<java.util.List<nl.earpi.generated.autorisationstruct.Person>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAll", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAll_args args = new getAll_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<nl.earpi.generated.autorisationstruct.Person> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAll();
      }
    }

    public void storeNewPerson(nl.earpi.generated.autorisationstruct.Person person, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      storeNewPerson_call method_call = new storeNewPerson_call(person, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class storeNewPerson_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private nl.earpi.generated.autorisationstruct.Person person;
      public storeNewPerson_call(nl.earpi.generated.autorisationstruct.Person person, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.person = person;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("storeNewPerson", org.apache.thrift.protocol.TMessageType.CALL, 0));
        storeNewPerson_args args = new storeNewPerson_args();
        args.setPerson(person);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void changePassword(java.lang.String username, java.lang.String password, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      changePassword_call method_call = new changePassword_call(username, password, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class changePassword_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String username;
      private java.lang.String password;
      public changePassword_call(java.lang.String username, java.lang.String password, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.username = username;
        this.password = password;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("changePassword", org.apache.thrift.protocol.TMessageType.CALL, 0));
        changePassword_args args = new changePassword_args();
        args.setUsername(username);
        args.setPassword(password);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws nl.earpi.generated.exception.BadHashException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("loginCall", new loginCall());
      processMap.put("getPersonConfig", new getPersonConfig());
      processMap.put("getAll", new getAll());
      processMap.put("storeNewPerson", new storeNewPerson());
      processMap.put("changePassword", new changePassword());
      return processMap;
    }

    public static class loginCall<I extends Iface> extends org.apache.thrift.ProcessFunction<I, loginCall_args> {
      public loginCall() {
        super("loginCall");
      }

      public loginCall_args getEmptyArgsInstance() {
        return new loginCall_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public loginCall_result getResult(I iface, loginCall_args args) throws org.apache.thrift.TException {
        loginCall_result result = new loginCall_result();
        try {
          result.success = iface.loginCall(args.loginobject);
        } catch (nl.earpi.generated.exception.BadHashException bad) {
          result.bad = bad;
        } catch (nl.earpi.generated.exception.LoginFailedException fail) {
          result.fail = fail;
        }
        return result;
      }
    }

    public static class getPersonConfig<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPersonConfig_args> {
      public getPersonConfig() {
        super("getPersonConfig");
      }

      public getPersonConfig_args getEmptyArgsInstance() {
        return new getPersonConfig_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPersonConfig_result getResult(I iface, getPersonConfig_args args) throws org.apache.thrift.TException {
        getPersonConfig_result result = new getPersonConfig_result();
        result.success = iface.getPersonConfig(args.uniquename);
        return result;
      }
    }

    public static class getAll<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAll_args> {
      public getAll() {
        super("getAll");
      }

      public getAll_args getEmptyArgsInstance() {
        return new getAll_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAll_result getResult(I iface, getAll_args args) throws org.apache.thrift.TException {
        getAll_result result = new getAll_result();
        result.success = iface.getAll();
        return result;
      }
    }

    public static class storeNewPerson<I extends Iface> extends org.apache.thrift.ProcessFunction<I, storeNewPerson_args> {
      public storeNewPerson() {
        super("storeNewPerson");
      }

      public storeNewPerson_args getEmptyArgsInstance() {
        return new storeNewPerson_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public storeNewPerson_result getResult(I iface, storeNewPerson_args args) throws org.apache.thrift.TException {
        storeNewPerson_result result = new storeNewPerson_result();
        iface.storeNewPerson(args.person);
        return result;
      }
    }

    public static class changePassword<I extends Iface> extends org.apache.thrift.ProcessFunction<I, changePassword_args> {
      public changePassword() {
        super("changePassword");
      }

      public changePassword_args getEmptyArgsInstance() {
        return new changePassword_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public changePassword_result getResult(I iface, changePassword_args args) throws org.apache.thrift.TException {
        changePassword_result result = new changePassword_result();
        try {
          iface.changePassword(args.username, args.password);
        } catch (nl.earpi.generated.exception.BadHashException badHashException) {
          result.badHashException = badHashException;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("loginCall", new loginCall());
      processMap.put("getPersonConfig", new getPersonConfig());
      processMap.put("getAll", new getAll());
      processMap.put("storeNewPerson", new storeNewPerson());
      processMap.put("changePassword", new changePassword());
      return processMap;
    }

    public static class loginCall<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, loginCall_args, nl.earpi.generated.autorisationstruct.Person> {
      public loginCall() {
        super("loginCall");
      }

      public loginCall_args getEmptyArgsInstance() {
        return new loginCall_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<nl.earpi.generated.autorisationstruct.Person> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<nl.earpi.generated.autorisationstruct.Person>() { 
          public void onComplete(nl.earpi.generated.autorisationstruct.Person o) {
            loginCall_result result = new loginCall_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            loginCall_result result = new loginCall_result();
            if (e instanceof nl.earpi.generated.exception.BadHashException) {
              result.bad = (nl.earpi.generated.exception.BadHashException) e;
              result.setBadIsSet(true);
              msg = result;
            } else if (e instanceof nl.earpi.generated.exception.LoginFailedException) {
              result.fail = (nl.earpi.generated.exception.LoginFailedException) e;
              result.setFailIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, loginCall_args args, org.apache.thrift.async.AsyncMethodCallback<nl.earpi.generated.autorisationstruct.Person> resultHandler) throws org.apache.thrift.TException {
        iface.loginCall(args.loginobject,resultHandler);
      }
    }

    public static class getPersonConfig<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPersonConfig_args, nl.earpi.generated.autorisationstruct.Person> {
      public getPersonConfig() {
        super("getPersonConfig");
      }

      public getPersonConfig_args getEmptyArgsInstance() {
        return new getPersonConfig_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<nl.earpi.generated.autorisationstruct.Person> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<nl.earpi.generated.autorisationstruct.Person>() { 
          public void onComplete(nl.earpi.generated.autorisationstruct.Person o) {
            getPersonConfig_result result = new getPersonConfig_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getPersonConfig_result result = new getPersonConfig_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getPersonConfig_args args, org.apache.thrift.async.AsyncMethodCallback<nl.earpi.generated.autorisationstruct.Person> resultHandler) throws org.apache.thrift.TException {
        iface.getPersonConfig(args.uniquename,resultHandler);
      }
    }

    public static class getAll<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAll_args, java.util.List<nl.earpi.generated.autorisationstruct.Person>> {
      public getAll() {
        super("getAll");
      }

      public getAll_args getEmptyArgsInstance() {
        return new getAll_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<nl.earpi.generated.autorisationstruct.Person>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<nl.earpi.generated.autorisationstruct.Person>>() { 
          public void onComplete(java.util.List<nl.earpi.generated.autorisationstruct.Person> o) {
            getAll_result result = new getAll_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getAll_result result = new getAll_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAll_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<nl.earpi.generated.autorisationstruct.Person>> resultHandler) throws org.apache.thrift.TException {
        iface.getAll(resultHandler);
      }
    }

    public static class storeNewPerson<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, storeNewPerson_args, Void> {
      public storeNewPerson() {
        super("storeNewPerson");
      }

      public storeNewPerson_args getEmptyArgsInstance() {
        return new storeNewPerson_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            storeNewPerson_result result = new storeNewPerson_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            storeNewPerson_result result = new storeNewPerson_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, storeNewPerson_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.storeNewPerson(args.person,resultHandler);
      }
    }

    public static class changePassword<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, changePassword_args, Void> {
      public changePassword() {
        super("changePassword");
      }

      public changePassword_args getEmptyArgsInstance() {
        return new changePassword_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            changePassword_result result = new changePassword_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            changePassword_result result = new changePassword_result();
            if (e instanceof nl.earpi.generated.exception.BadHashException) {
              result.badHashException = (nl.earpi.generated.exception.BadHashException) e;
              result.setBadHashExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, changePassword_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.changePassword(args.username, args.password,resultHandler);
      }
    }

  }

  public static class loginCall_args implements org.apache.thrift.TBase<loginCall_args, loginCall_args._Fields>, java.io.Serializable, Cloneable, Comparable<loginCall_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loginCall_args");

    private static final org.apache.thrift.protocol.TField LOGINOBJECT_FIELD_DESC = new org.apache.thrift.protocol.TField("loginobject", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new loginCall_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new loginCall_argsTupleSchemeFactory();

    public LongMemoryLoginInputObject loginobject; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOGINOBJECT((short)1, "loginobject");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOGINOBJECT
            return LOGINOBJECT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOGINOBJECT, new org.apache.thrift.meta_data.FieldMetaData("loginobject", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LongMemoryLoginInputObject.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loginCall_args.class, metaDataMap);
    }

    public loginCall_args() {
    }

    public loginCall_args(
      LongMemoryLoginInputObject loginobject)
    {
      this();
      this.loginobject = loginobject;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loginCall_args(loginCall_args other) {
      if (other.isSetLoginobject()) {
        this.loginobject = new LongMemoryLoginInputObject(other.loginobject);
      }
    }

    public loginCall_args deepCopy() {
      return new loginCall_args(this);
    }

    @Override
    public void clear() {
      this.loginobject = null;
    }

    public LongMemoryLoginInputObject getLoginobject() {
      return this.loginobject;
    }

    public loginCall_args setLoginobject(LongMemoryLoginInputObject loginobject) {
      this.loginobject = loginobject;
      return this;
    }

    public void unsetLoginobject() {
      this.loginobject = null;
    }

    /** Returns true if field loginobject is set (has been assigned a value) and false otherwise */
    public boolean isSetLoginobject() {
      return this.loginobject != null;
    }

    public void setLoginobjectIsSet(boolean value) {
      if (!value) {
        this.loginobject = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case LOGINOBJECT:
        if (value == null) {
          unsetLoginobject();
        } else {
          setLoginobject((LongMemoryLoginInputObject)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case LOGINOBJECT:
        return getLoginobject();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case LOGINOBJECT:
        return isSetLoginobject();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof loginCall_args)
        return this.equals((loginCall_args)that);
      return false;
    }

    public boolean equals(loginCall_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_loginobject = true && this.isSetLoginobject();
      boolean that_present_loginobject = true && that.isSetLoginobject();
      if (this_present_loginobject || that_present_loginobject) {
        if (!(this_present_loginobject && that_present_loginobject))
          return false;
        if (!this.loginobject.equals(that.loginobject))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetLoginobject()) ? 131071 : 524287);
      if (isSetLoginobject())
        hashCode = hashCode * 8191 + loginobject.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(loginCall_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetLoginobject()).compareTo(other.isSetLoginobject());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLoginobject()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loginobject, other.loginobject);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("loginCall_args(");
      boolean first = true;

      sb.append("loginobject:");
      if (this.loginobject == null) {
        sb.append("null");
      } else {
        sb.append(this.loginobject);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (loginobject != null) {
        loginobject.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loginCall_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public loginCall_argsStandardScheme getScheme() {
        return new loginCall_argsStandardScheme();
      }
    }

    private static class loginCall_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<loginCall_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loginCall_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOGINOBJECT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.loginobject = new LongMemoryLoginInputObject();
                struct.loginobject.read(iprot);
                struct.setLoginobjectIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loginCall_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.loginobject != null) {
          oprot.writeFieldBegin(LOGINOBJECT_FIELD_DESC);
          struct.loginobject.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loginCall_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public loginCall_argsTupleScheme getScheme() {
        return new loginCall_argsTupleScheme();
      }
    }

    private static class loginCall_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<loginCall_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loginCall_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetLoginobject()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLoginobject()) {
          struct.loginobject.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loginCall_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.loginobject = new LongMemoryLoginInputObject();
          struct.loginobject.read(iprot);
          struct.setLoginobjectIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class loginCall_result implements org.apache.thrift.TBase<loginCall_result, loginCall_result._Fields>, java.io.Serializable, Cloneable, Comparable<loginCall_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loginCall_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField BAD_FIELD_DESC = new org.apache.thrift.protocol.TField("bad", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField FAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("fail", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new loginCall_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new loginCall_resultTupleSchemeFactory();

    public nl.earpi.generated.autorisationstruct.Person success; // required
    public nl.earpi.generated.exception.BadHashException bad; // required
    public nl.earpi.generated.exception.LoginFailedException fail; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BAD((short)1, "bad"),
      FAIL((short)2, "fail");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BAD
            return BAD;
          case 2: // FAIL
            return FAIL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, nl.earpi.generated.autorisationstruct.Person.class)));
      tmpMap.put(_Fields.BAD, new org.apache.thrift.meta_data.FieldMetaData("bad", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, nl.earpi.generated.exception.BadHashException.class)));
      tmpMap.put(_Fields.FAIL, new org.apache.thrift.meta_data.FieldMetaData("fail", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, nl.earpi.generated.exception.LoginFailedException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loginCall_result.class, metaDataMap);
    }

    public loginCall_result() {
    }

    public loginCall_result(
      nl.earpi.generated.autorisationstruct.Person success,
      nl.earpi.generated.exception.BadHashException bad,
      nl.earpi.generated.exception.LoginFailedException fail)
    {
      this();
      this.success = success;
      this.bad = bad;
      this.fail = fail;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loginCall_result(loginCall_result other) {
      if (other.isSetSuccess()) {
        this.success = new nl.earpi.generated.autorisationstruct.Person(other.success);
      }
      if (other.isSetBad()) {
        this.bad = new nl.earpi.generated.exception.BadHashException(other.bad);
      }
      if (other.isSetFail()) {
        this.fail = new nl.earpi.generated.exception.LoginFailedException(other.fail);
      }
    }

    public loginCall_result deepCopy() {
      return new loginCall_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.bad = null;
      this.fail = null;
    }

    public nl.earpi.generated.autorisationstruct.Person getSuccess() {
      return this.success;
    }

    public loginCall_result setSuccess(nl.earpi.generated.autorisationstruct.Person success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public nl.earpi.generated.exception.BadHashException getBad() {
      return this.bad;
    }

    public loginCall_result setBad(nl.earpi.generated.exception.BadHashException bad) {
      this.bad = bad;
      return this;
    }

    public void unsetBad() {
      this.bad = null;
    }

    /** Returns true if field bad is set (has been assigned a value) and false otherwise */
    public boolean isSetBad() {
      return this.bad != null;
    }

    public void setBadIsSet(boolean value) {
      if (!value) {
        this.bad = null;
      }
    }

    public nl.earpi.generated.exception.LoginFailedException getFail() {
      return this.fail;
    }

    public loginCall_result setFail(nl.earpi.generated.exception.LoginFailedException fail) {
      this.fail = fail;
      return this;
    }

    public void unsetFail() {
      this.fail = null;
    }

    /** Returns true if field fail is set (has been assigned a value) and false otherwise */
    public boolean isSetFail() {
      return this.fail != null;
    }

    public void setFailIsSet(boolean value) {
      if (!value) {
        this.fail = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((nl.earpi.generated.autorisationstruct.Person)value);
        }
        break;

      case BAD:
        if (value == null) {
          unsetBad();
        } else {
          setBad((nl.earpi.generated.exception.BadHashException)value);
        }
        break;

      case FAIL:
        if (value == null) {
          unsetFail();
        } else {
          setFail((nl.earpi.generated.exception.LoginFailedException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BAD:
        return getBad();

      case FAIL:
        return getFail();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BAD:
        return isSetBad();
      case FAIL:
        return isSetFail();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof loginCall_result)
        return this.equals((loginCall_result)that);
      return false;
    }

    public boolean equals(loginCall_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_bad = true && this.isSetBad();
      boolean that_present_bad = true && that.isSetBad();
      if (this_present_bad || that_present_bad) {
        if (!(this_present_bad && that_present_bad))
          return false;
        if (!this.bad.equals(that.bad))
          return false;
      }

      boolean this_present_fail = true && this.isSetFail();
      boolean that_present_fail = true && that.isSetFail();
      if (this_present_fail || that_present_fail) {
        if (!(this_present_fail && that_present_fail))
          return false;
        if (!this.fail.equals(that.fail))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetBad()) ? 131071 : 524287);
      if (isSetBad())
        hashCode = hashCode * 8191 + bad.hashCode();

      hashCode = hashCode * 8191 + ((isSetFail()) ? 131071 : 524287);
      if (isSetFail())
        hashCode = hashCode * 8191 + fail.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(loginCall_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetBad()).compareTo(other.isSetBad());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBad()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bad, other.bad);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFail()).compareTo(other.isSetFail());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFail()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fail, other.fail);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("loginCall_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bad:");
      if (this.bad == null) {
        sb.append("null");
      } else {
        sb.append(this.bad);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fail:");
      if (this.fail == null) {
        sb.append("null");
      } else {
        sb.append(this.fail);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loginCall_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public loginCall_resultStandardScheme getScheme() {
        return new loginCall_resultStandardScheme();
      }
    }

    private static class loginCall_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<loginCall_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loginCall_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new nl.earpi.generated.autorisationstruct.Person();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BAD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bad = new nl.earpi.generated.exception.BadHashException();
                struct.bad.read(iprot);
                struct.setBadIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FAIL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.fail = new nl.earpi.generated.exception.LoginFailedException();
                struct.fail.read(iprot);
                struct.setFailIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loginCall_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.bad != null) {
          oprot.writeFieldBegin(BAD_FIELD_DESC);
          struct.bad.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.fail != null) {
          oprot.writeFieldBegin(FAIL_FIELD_DESC);
          struct.fail.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loginCall_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public loginCall_resultTupleScheme getScheme() {
        return new loginCall_resultTupleScheme();
      }
    }

    private static class loginCall_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<loginCall_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loginCall_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBad()) {
          optionals.set(1);
        }
        if (struct.isSetFail()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetBad()) {
          struct.bad.write(oprot);
        }
        if (struct.isSetFail()) {
          struct.fail.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loginCall_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new nl.earpi.generated.autorisationstruct.Person();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bad = new nl.earpi.generated.exception.BadHashException();
          struct.bad.read(iprot);
          struct.setBadIsSet(true);
        }
        if (incoming.get(2)) {
          struct.fail = new nl.earpi.generated.exception.LoginFailedException();
          struct.fail.read(iprot);
          struct.setFailIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getPersonConfig_args implements org.apache.thrift.TBase<getPersonConfig_args, getPersonConfig_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPersonConfig_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPersonConfig_args");

    private static final org.apache.thrift.protocol.TField UNIQUENAME_FIELD_DESC = new org.apache.thrift.protocol.TField("uniquename", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getPersonConfig_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getPersonConfig_argsTupleSchemeFactory();

    public java.lang.String uniquename; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UNIQUENAME((short)1, "uniquename");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UNIQUENAME
            return UNIQUENAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UNIQUENAME, new org.apache.thrift.meta_data.FieldMetaData("uniquename", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPersonConfig_args.class, metaDataMap);
    }

    public getPersonConfig_args() {
    }

    public getPersonConfig_args(
      java.lang.String uniquename)
    {
      this();
      this.uniquename = uniquename;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPersonConfig_args(getPersonConfig_args other) {
      if (other.isSetUniquename()) {
        this.uniquename = other.uniquename;
      }
    }

    public getPersonConfig_args deepCopy() {
      return new getPersonConfig_args(this);
    }

    @Override
    public void clear() {
      this.uniquename = null;
    }

    public java.lang.String getUniquename() {
      return this.uniquename;
    }

    public getPersonConfig_args setUniquename(java.lang.String uniquename) {
      this.uniquename = uniquename;
      return this;
    }

    public void unsetUniquename() {
      this.uniquename = null;
    }

    /** Returns true if field uniquename is set (has been assigned a value) and false otherwise */
    public boolean isSetUniquename() {
      return this.uniquename != null;
    }

    public void setUniquenameIsSet(boolean value) {
      if (!value) {
        this.uniquename = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case UNIQUENAME:
        if (value == null) {
          unsetUniquename();
        } else {
          setUniquename((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case UNIQUENAME:
        return getUniquename();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case UNIQUENAME:
        return isSetUniquename();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getPersonConfig_args)
        return this.equals((getPersonConfig_args)that);
      return false;
    }

    public boolean equals(getPersonConfig_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_uniquename = true && this.isSetUniquename();
      boolean that_present_uniquename = true && that.isSetUniquename();
      if (this_present_uniquename || that_present_uniquename) {
        if (!(this_present_uniquename && that_present_uniquename))
          return false;
        if (!this.uniquename.equals(that.uniquename))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetUniquename()) ? 131071 : 524287);
      if (isSetUniquename())
        hashCode = hashCode * 8191 + uniquename.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getPersonConfig_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetUniquename()).compareTo(other.isSetUniquename());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUniquename()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uniquename, other.uniquename);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getPersonConfig_args(");
      boolean first = true;

      sb.append("uniquename:");
      if (this.uniquename == null) {
        sb.append("null");
      } else {
        sb.append(this.uniquename);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPersonConfig_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPersonConfig_argsStandardScheme getScheme() {
        return new getPersonConfig_argsStandardScheme();
      }
    }

    private static class getPersonConfig_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getPersonConfig_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPersonConfig_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UNIQUENAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.uniquename = iprot.readString();
                struct.setUniquenameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPersonConfig_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.uniquename != null) {
          oprot.writeFieldBegin(UNIQUENAME_FIELD_DESC);
          oprot.writeString(struct.uniquename);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPersonConfig_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPersonConfig_argsTupleScheme getScheme() {
        return new getPersonConfig_argsTupleScheme();
      }
    }

    private static class getPersonConfig_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getPersonConfig_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPersonConfig_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUniquename()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUniquename()) {
          oprot.writeString(struct.uniquename);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPersonConfig_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.uniquename = iprot.readString();
          struct.setUniquenameIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getPersonConfig_result implements org.apache.thrift.TBase<getPersonConfig_result, getPersonConfig_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPersonConfig_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPersonConfig_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getPersonConfig_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getPersonConfig_resultTupleSchemeFactory();

    public nl.earpi.generated.autorisationstruct.Person success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, nl.earpi.generated.autorisationstruct.Person.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPersonConfig_result.class, metaDataMap);
    }

    public getPersonConfig_result() {
    }

    public getPersonConfig_result(
      nl.earpi.generated.autorisationstruct.Person success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPersonConfig_result(getPersonConfig_result other) {
      if (other.isSetSuccess()) {
        this.success = new nl.earpi.generated.autorisationstruct.Person(other.success);
      }
    }

    public getPersonConfig_result deepCopy() {
      return new getPersonConfig_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public nl.earpi.generated.autorisationstruct.Person getSuccess() {
      return this.success;
    }

    public getPersonConfig_result setSuccess(nl.earpi.generated.autorisationstruct.Person success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((nl.earpi.generated.autorisationstruct.Person)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getPersonConfig_result)
        return this.equals((getPersonConfig_result)that);
      return false;
    }

    public boolean equals(getPersonConfig_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getPersonConfig_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getPersonConfig_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPersonConfig_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPersonConfig_resultStandardScheme getScheme() {
        return new getPersonConfig_resultStandardScheme();
      }
    }

    private static class getPersonConfig_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getPersonConfig_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPersonConfig_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new nl.earpi.generated.autorisationstruct.Person();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPersonConfig_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPersonConfig_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPersonConfig_resultTupleScheme getScheme() {
        return new getPersonConfig_resultTupleScheme();
      }
    }

    private static class getPersonConfig_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getPersonConfig_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPersonConfig_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPersonConfig_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new nl.earpi.generated.autorisationstruct.Person();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getAll_args implements org.apache.thrift.TBase<getAll_args, getAll_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAll_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAll_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAll_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAll_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAll_args.class, metaDataMap);
    }

    public getAll_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAll_args(getAll_args other) {
    }

    public getAll_args deepCopy() {
      return new getAll_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getAll_args)
        return this.equals((getAll_args)that);
      return false;
    }

    public boolean equals(getAll_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(getAll_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getAll_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAll_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAll_argsStandardScheme getScheme() {
        return new getAll_argsStandardScheme();
      }
    }

    private static class getAll_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getAll_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAll_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAll_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAll_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAll_argsTupleScheme getScheme() {
        return new getAll_argsTupleScheme();
      }
    }

    private static class getAll_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getAll_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAll_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAll_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getAll_result implements org.apache.thrift.TBase<getAll_result, getAll_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAll_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAll_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAll_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAll_resultTupleSchemeFactory();

    public java.util.List<nl.earpi.generated.autorisationstruct.Person> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, nl.earpi.generated.autorisationstruct.Person.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAll_result.class, metaDataMap);
    }

    public getAll_result() {
    }

    public getAll_result(
      java.util.List<nl.earpi.generated.autorisationstruct.Person> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAll_result(getAll_result other) {
      if (other.isSetSuccess()) {
        java.util.List<nl.earpi.generated.autorisationstruct.Person> __this__success = new java.util.ArrayList<nl.earpi.generated.autorisationstruct.Person>(other.success.size());
        for (nl.earpi.generated.autorisationstruct.Person other_element : other.success) {
          __this__success.add(new nl.earpi.generated.autorisationstruct.Person(other_element));
        }
        this.success = __this__success;
      }
    }

    public getAll_result deepCopy() {
      return new getAll_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<nl.earpi.generated.autorisationstruct.Person> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(nl.earpi.generated.autorisationstruct.Person elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<nl.earpi.generated.autorisationstruct.Person>();
      }
      this.success.add(elem);
    }

    public java.util.List<nl.earpi.generated.autorisationstruct.Person> getSuccess() {
      return this.success;
    }

    public getAll_result setSuccess(java.util.List<nl.earpi.generated.autorisationstruct.Person> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<nl.earpi.generated.autorisationstruct.Person>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getAll_result)
        return this.equals((getAll_result)that);
      return false;
    }

    public boolean equals(getAll_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getAll_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getAll_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAll_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAll_resultStandardScheme getScheme() {
        return new getAll_resultStandardScheme();
      }
    }

    private static class getAll_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getAll_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAll_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<nl.earpi.generated.autorisationstruct.Person>(_list0.size);
                  nl.earpi.generated.autorisationstruct.Person _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new nl.earpi.generated.autorisationstruct.Person();
                    _elem1.read(iprot);
                    struct.success.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAll_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (nl.earpi.generated.autorisationstruct.Person _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAll_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAll_resultTupleScheme getScheme() {
        return new getAll_resultTupleScheme();
      }
    }

    private static class getAll_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getAll_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAll_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (nl.earpi.generated.autorisationstruct.Person _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAll_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<nl.earpi.generated.autorisationstruct.Person>(_list5.size);
            nl.earpi.generated.autorisationstruct.Person _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = new nl.earpi.generated.autorisationstruct.Person();
              _elem6.read(iprot);
              struct.success.add(_elem6);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class storeNewPerson_args implements org.apache.thrift.TBase<storeNewPerson_args, storeNewPerson_args._Fields>, java.io.Serializable, Cloneable, Comparable<storeNewPerson_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("storeNewPerson_args");

    private static final org.apache.thrift.protocol.TField PERSON_FIELD_DESC = new org.apache.thrift.protocol.TField("person", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new storeNewPerson_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new storeNewPerson_argsTupleSchemeFactory();

    public nl.earpi.generated.autorisationstruct.Person person; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PERSON((short)1, "person");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PERSON
            return PERSON;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PERSON, new org.apache.thrift.meta_data.FieldMetaData("person", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, nl.earpi.generated.autorisationstruct.Person.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(storeNewPerson_args.class, metaDataMap);
    }

    public storeNewPerson_args() {
    }

    public storeNewPerson_args(
      nl.earpi.generated.autorisationstruct.Person person)
    {
      this();
      this.person = person;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public storeNewPerson_args(storeNewPerson_args other) {
      if (other.isSetPerson()) {
        this.person = new nl.earpi.generated.autorisationstruct.Person(other.person);
      }
    }

    public storeNewPerson_args deepCopy() {
      return new storeNewPerson_args(this);
    }

    @Override
    public void clear() {
      this.person = null;
    }

    public nl.earpi.generated.autorisationstruct.Person getPerson() {
      return this.person;
    }

    public storeNewPerson_args setPerson(nl.earpi.generated.autorisationstruct.Person person) {
      this.person = person;
      return this;
    }

    public void unsetPerson() {
      this.person = null;
    }

    /** Returns true if field person is set (has been assigned a value) and false otherwise */
    public boolean isSetPerson() {
      return this.person != null;
    }

    public void setPersonIsSet(boolean value) {
      if (!value) {
        this.person = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case PERSON:
        if (value == null) {
          unsetPerson();
        } else {
          setPerson((nl.earpi.generated.autorisationstruct.Person)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case PERSON:
        return getPerson();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case PERSON:
        return isSetPerson();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof storeNewPerson_args)
        return this.equals((storeNewPerson_args)that);
      return false;
    }

    public boolean equals(storeNewPerson_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_person = true && this.isSetPerson();
      boolean that_present_person = true && that.isSetPerson();
      if (this_present_person || that_present_person) {
        if (!(this_present_person && that_present_person))
          return false;
        if (!this.person.equals(that.person))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetPerson()) ? 131071 : 524287);
      if (isSetPerson())
        hashCode = hashCode * 8191 + person.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(storeNewPerson_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetPerson()).compareTo(other.isSetPerson());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPerson()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.person, other.person);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("storeNewPerson_args(");
      boolean first = true;

      sb.append("person:");
      if (this.person == null) {
        sb.append("null");
      } else {
        sb.append(this.person);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (person != null) {
        person.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class storeNewPerson_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public storeNewPerson_argsStandardScheme getScheme() {
        return new storeNewPerson_argsStandardScheme();
      }
    }

    private static class storeNewPerson_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<storeNewPerson_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, storeNewPerson_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PERSON
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.person = new nl.earpi.generated.autorisationstruct.Person();
                struct.person.read(iprot);
                struct.setPersonIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, storeNewPerson_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.person != null) {
          oprot.writeFieldBegin(PERSON_FIELD_DESC);
          struct.person.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class storeNewPerson_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public storeNewPerson_argsTupleScheme getScheme() {
        return new storeNewPerson_argsTupleScheme();
      }
    }

    private static class storeNewPerson_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<storeNewPerson_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, storeNewPerson_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetPerson()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPerson()) {
          struct.person.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, storeNewPerson_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.person = new nl.earpi.generated.autorisationstruct.Person();
          struct.person.read(iprot);
          struct.setPersonIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class storeNewPerson_result implements org.apache.thrift.TBase<storeNewPerson_result, storeNewPerson_result._Fields>, java.io.Serializable, Cloneable, Comparable<storeNewPerson_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("storeNewPerson_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new storeNewPerson_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new storeNewPerson_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(storeNewPerson_result.class, metaDataMap);
    }

    public storeNewPerson_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public storeNewPerson_result(storeNewPerson_result other) {
    }

    public storeNewPerson_result deepCopy() {
      return new storeNewPerson_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof storeNewPerson_result)
        return this.equals((storeNewPerson_result)that);
      return false;
    }

    public boolean equals(storeNewPerson_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(storeNewPerson_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("storeNewPerson_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class storeNewPerson_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public storeNewPerson_resultStandardScheme getScheme() {
        return new storeNewPerson_resultStandardScheme();
      }
    }

    private static class storeNewPerson_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<storeNewPerson_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, storeNewPerson_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, storeNewPerson_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class storeNewPerson_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public storeNewPerson_resultTupleScheme getScheme() {
        return new storeNewPerson_resultTupleScheme();
      }
    }

    private static class storeNewPerson_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<storeNewPerson_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, storeNewPerson_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, storeNewPerson_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class changePassword_args implements org.apache.thrift.TBase<changePassword_args, changePassword_args._Fields>, java.io.Serializable, Cloneable, Comparable<changePassword_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("changePassword_args");

    private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new changePassword_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new changePassword_argsTupleSchemeFactory();

    public java.lang.String username; // required
    public java.lang.String password; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERNAME((short)1, "username"),
      PASSWORD((short)2, "password");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERNAME
            return USERNAME;
          case 2: // PASSWORD
            return PASSWORD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(changePassword_args.class, metaDataMap);
    }

    public changePassword_args() {
    }

    public changePassword_args(
      java.lang.String username,
      java.lang.String password)
    {
      this();
      this.username = username;
      this.password = password;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public changePassword_args(changePassword_args other) {
      if (other.isSetUsername()) {
        this.username = other.username;
      }
      if (other.isSetPassword()) {
        this.password = other.password;
      }
    }

    public changePassword_args deepCopy() {
      return new changePassword_args(this);
    }

    @Override
    public void clear() {
      this.username = null;
      this.password = null;
    }

    public java.lang.String getUsername() {
      return this.username;
    }

    public changePassword_args setUsername(java.lang.String username) {
      this.username = username;
      return this;
    }

    public void unsetUsername() {
      this.username = null;
    }

    /** Returns true if field username is set (has been assigned a value) and false otherwise */
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    public java.lang.String getPassword() {
      return this.password;
    }

    public changePassword_args setPassword(java.lang.String password) {
      this.password = password;
      return this;
    }

    public void unsetPassword() {
      this.password = null;
    }

    /** Returns true if field password is set (has been assigned a value) and false otherwise */
    public boolean isSetPassword() {
      return this.password != null;
    }

    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case USERNAME:
        if (value == null) {
          unsetUsername();
        } else {
          setUsername((java.lang.String)value);
        }
        break;

      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          setPassword((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case USERNAME:
        return getUsername();

      case PASSWORD:
        return getPassword();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case USERNAME:
        return isSetUsername();
      case PASSWORD:
        return isSetPassword();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof changePassword_args)
        return this.equals((changePassword_args)that);
      return false;
    }

    public boolean equals(changePassword_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!this.password.equals(that.password))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetUsername()) ? 131071 : 524287);
      if (isSetUsername())
        hashCode = hashCode * 8191 + username.hashCode();

      hashCode = hashCode * 8191 + ((isSetPassword()) ? 131071 : 524287);
      if (isSetPassword())
        hashCode = hashCode * 8191 + password.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(changePassword_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("changePassword_args(");
      boolean first = true;

      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class changePassword_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public changePassword_argsStandardScheme getScheme() {
        return new changePassword_argsStandardScheme();
      }
    }

    private static class changePassword_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<changePassword_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, changePassword_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.username = iprot.readString();
                struct.setUsernameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.password = iprot.readString();
                struct.setPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, changePassword_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.username != null) {
          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
          oprot.writeString(struct.username);
          oprot.writeFieldEnd();
        }
        if (struct.password != null) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class changePassword_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public changePassword_argsTupleScheme getScheme() {
        return new changePassword_argsTupleScheme();
      }
    }

    private static class changePassword_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<changePassword_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, changePassword_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUsername()) {
          optionals.set(0);
        }
        if (struct.isSetPassword()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUsername()) {
          oprot.writeString(struct.username);
        }
        if (struct.isSetPassword()) {
          oprot.writeString(struct.password);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, changePassword_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.username = iprot.readString();
          struct.setUsernameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.password = iprot.readString();
          struct.setPasswordIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class changePassword_result implements org.apache.thrift.TBase<changePassword_result, changePassword_result._Fields>, java.io.Serializable, Cloneable, Comparable<changePassword_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("changePassword_result");

    private static final org.apache.thrift.protocol.TField BAD_HASH_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("badHashException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new changePassword_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new changePassword_resultTupleSchemeFactory();

    public nl.earpi.generated.exception.BadHashException badHashException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BAD_HASH_EXCEPTION((short)1, "badHashException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BAD_HASH_EXCEPTION
            return BAD_HASH_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BAD_HASH_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("badHashException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, nl.earpi.generated.exception.BadHashException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(changePassword_result.class, metaDataMap);
    }

    public changePassword_result() {
    }

    public changePassword_result(
      nl.earpi.generated.exception.BadHashException badHashException)
    {
      this();
      this.badHashException = badHashException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public changePassword_result(changePassword_result other) {
      if (other.isSetBadHashException()) {
        this.badHashException = new nl.earpi.generated.exception.BadHashException(other.badHashException);
      }
    }

    public changePassword_result deepCopy() {
      return new changePassword_result(this);
    }

    @Override
    public void clear() {
      this.badHashException = null;
    }

    public nl.earpi.generated.exception.BadHashException getBadHashException() {
      return this.badHashException;
    }

    public changePassword_result setBadHashException(nl.earpi.generated.exception.BadHashException badHashException) {
      this.badHashException = badHashException;
      return this;
    }

    public void unsetBadHashException() {
      this.badHashException = null;
    }

    /** Returns true if field badHashException is set (has been assigned a value) and false otherwise */
    public boolean isSetBadHashException() {
      return this.badHashException != null;
    }

    public void setBadHashExceptionIsSet(boolean value) {
      if (!value) {
        this.badHashException = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case BAD_HASH_EXCEPTION:
        if (value == null) {
          unsetBadHashException();
        } else {
          setBadHashException((nl.earpi.generated.exception.BadHashException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BAD_HASH_EXCEPTION:
        return getBadHashException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BAD_HASH_EXCEPTION:
        return isSetBadHashException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof changePassword_result)
        return this.equals((changePassword_result)that);
      return false;
    }

    public boolean equals(changePassword_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_badHashException = true && this.isSetBadHashException();
      boolean that_present_badHashException = true && that.isSetBadHashException();
      if (this_present_badHashException || that_present_badHashException) {
        if (!(this_present_badHashException && that_present_badHashException))
          return false;
        if (!this.badHashException.equals(that.badHashException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetBadHashException()) ? 131071 : 524287);
      if (isSetBadHashException())
        hashCode = hashCode * 8191 + badHashException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(changePassword_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetBadHashException()).compareTo(other.isSetBadHashException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBadHashException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.badHashException, other.badHashException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("changePassword_result(");
      boolean first = true;

      sb.append("badHashException:");
      if (this.badHashException == null) {
        sb.append("null");
      } else {
        sb.append(this.badHashException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class changePassword_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public changePassword_resultStandardScheme getScheme() {
        return new changePassword_resultStandardScheme();
      }
    }

    private static class changePassword_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<changePassword_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, changePassword_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BAD_HASH_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.badHashException = new nl.earpi.generated.exception.BadHashException();
                struct.badHashException.read(iprot);
                struct.setBadHashExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, changePassword_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.badHashException != null) {
          oprot.writeFieldBegin(BAD_HASH_EXCEPTION_FIELD_DESC);
          struct.badHashException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class changePassword_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public changePassword_resultTupleScheme getScheme() {
        return new changePassword_resultTupleScheme();
      }
    }

    private static class changePassword_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<changePassword_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, changePassword_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBadHashException()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBadHashException()) {
          struct.badHashException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, changePassword_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.badHashException = new nl.earpi.generated.exception.BadHashException();
          struct.badHashException.read(iprot);
          struct.setBadHashExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
