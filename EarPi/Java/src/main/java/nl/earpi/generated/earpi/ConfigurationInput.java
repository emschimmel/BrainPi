/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package nl.earpi.generated.earpi;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-01-01")
public class ConfigurationInput implements org.apache.thrift.TBase<ConfigurationInput, ConfigurationInput._Fields>, java.io.Serializable, Cloneable, Comparable<ConfigurationInput> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ConfigurationInput");

  private static final org.apache.thrift.protocol.TField KEY_VALUE_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("keyValueMap", org.apache.thrift.protocol.TType.MAP, (short)1);
  private static final org.apache.thrift.protocol.TField DEVICE_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceToken", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ConfigurationInputStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ConfigurationInputTupleSchemeFactory();

  public java.util.Map<java.lang.String,java.nio.ByteBuffer> keyValueMap; // required
  public java.lang.String deviceToken; // required
  public java.lang.String token; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    KEY_VALUE_MAP((short)1, "keyValueMap"),
    DEVICE_TOKEN((short)2, "deviceToken"),
    TOKEN((short)3, "token");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // KEY_VALUE_MAP
          return KEY_VALUE_MAP;
        case 2: // DEVICE_TOKEN
          return DEVICE_TOKEN;
        case 3: // TOKEN
          return TOKEN;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.TOKEN};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.KEY_VALUE_MAP, new org.apache.thrift.meta_data.FieldMetaData("keyValueMap", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    tmpMap.put(_Fields.DEVICE_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("deviceToken", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ConfigurationInput.class, metaDataMap);
  }

  public ConfigurationInput() {
  }

  public ConfigurationInput(
    java.util.Map<java.lang.String,java.nio.ByteBuffer> keyValueMap,
    java.lang.String deviceToken)
  {
    this();
    this.keyValueMap = keyValueMap;
    this.deviceToken = deviceToken;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ConfigurationInput(ConfigurationInput other) {
    if (other.isSetKeyValueMap()) {
      java.util.Map<java.lang.String,java.nio.ByteBuffer> __this__keyValueMap = new java.util.HashMap<java.lang.String,java.nio.ByteBuffer>(other.keyValueMap);
      this.keyValueMap = __this__keyValueMap;
    }
    if (other.isSetDeviceToken()) {
      this.deviceToken = other.deviceToken;
    }
    if (other.isSetToken()) {
      this.token = other.token;
    }
  }

  public ConfigurationInput deepCopy() {
    return new ConfigurationInput(this);
  }

  @Override
  public void clear() {
    this.keyValueMap = null;
    this.deviceToken = null;
    this.token = null;
  }

  public int getKeyValueMapSize() {
    return (this.keyValueMap == null) ? 0 : this.keyValueMap.size();
  }

  public void putToKeyValueMap(java.lang.String key, java.nio.ByteBuffer val) {
    if (this.keyValueMap == null) {
      this.keyValueMap = new java.util.HashMap<java.lang.String,java.nio.ByteBuffer>();
    }
    this.keyValueMap.put(key, val);
  }

  public java.util.Map<java.lang.String,java.nio.ByteBuffer> getKeyValueMap() {
    return this.keyValueMap;
  }

  public ConfigurationInput setKeyValueMap(java.util.Map<java.lang.String,java.nio.ByteBuffer> keyValueMap) {
    this.keyValueMap = keyValueMap;
    return this;
  }

  public void unsetKeyValueMap() {
    this.keyValueMap = null;
  }

  /** Returns true if field keyValueMap is set (has been assigned a value) and false otherwise */
  public boolean isSetKeyValueMap() {
    return this.keyValueMap != null;
  }

  public void setKeyValueMapIsSet(boolean value) {
    if (!value) {
      this.keyValueMap = null;
    }
  }

  public java.lang.String getDeviceToken() {
    return this.deviceToken;
  }

  public ConfigurationInput setDeviceToken(java.lang.String deviceToken) {
    this.deviceToken = deviceToken;
    return this;
  }

  public void unsetDeviceToken() {
    this.deviceToken = null;
  }

  /** Returns true if field deviceToken is set (has been assigned a value) and false otherwise */
  public boolean isSetDeviceToken() {
    return this.deviceToken != null;
  }

  public void setDeviceTokenIsSet(boolean value) {
    if (!value) {
      this.deviceToken = null;
    }
  }

  public java.lang.String getToken() {
    return this.token;
  }

  public ConfigurationInput setToken(java.lang.String token) {
    this.token = token;
    return this;
  }

  public void unsetToken() {
    this.token = null;
  }

  /** Returns true if field token is set (has been assigned a value) and false otherwise */
  public boolean isSetToken() {
    return this.token != null;
  }

  public void setTokenIsSet(boolean value) {
    if (!value) {
      this.token = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case KEY_VALUE_MAP:
      if (value == null) {
        unsetKeyValueMap();
      } else {
        setKeyValueMap((java.util.Map<java.lang.String,java.nio.ByteBuffer>)value);
      }
      break;

    case DEVICE_TOKEN:
      if (value == null) {
        unsetDeviceToken();
      } else {
        setDeviceToken((java.lang.String)value);
      }
      break;

    case TOKEN:
      if (value == null) {
        unsetToken();
      } else {
        setToken((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case KEY_VALUE_MAP:
      return getKeyValueMap();

    case DEVICE_TOKEN:
      return getDeviceToken();

    case TOKEN:
      return getToken();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case KEY_VALUE_MAP:
      return isSetKeyValueMap();
    case DEVICE_TOKEN:
      return isSetDeviceToken();
    case TOKEN:
      return isSetToken();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ConfigurationInput)
      return this.equals((ConfigurationInput)that);
    return false;
  }

  public boolean equals(ConfigurationInput that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_keyValueMap = true && this.isSetKeyValueMap();
    boolean that_present_keyValueMap = true && that.isSetKeyValueMap();
    if (this_present_keyValueMap || that_present_keyValueMap) {
      if (!(this_present_keyValueMap && that_present_keyValueMap))
        return false;
      if (!this.keyValueMap.equals(that.keyValueMap))
        return false;
    }

    boolean this_present_deviceToken = true && this.isSetDeviceToken();
    boolean that_present_deviceToken = true && that.isSetDeviceToken();
    if (this_present_deviceToken || that_present_deviceToken) {
      if (!(this_present_deviceToken && that_present_deviceToken))
        return false;
      if (!this.deviceToken.equals(that.deviceToken))
        return false;
    }

    boolean this_present_token = true && this.isSetToken();
    boolean that_present_token = true && that.isSetToken();
    if (this_present_token || that_present_token) {
      if (!(this_present_token && that_present_token))
        return false;
      if (!this.token.equals(that.token))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetKeyValueMap()) ? 131071 : 524287);
    if (isSetKeyValueMap())
      hashCode = hashCode * 8191 + keyValueMap.hashCode();

    hashCode = hashCode * 8191 + ((isSetDeviceToken()) ? 131071 : 524287);
    if (isSetDeviceToken())
      hashCode = hashCode * 8191 + deviceToken.hashCode();

    hashCode = hashCode * 8191 + ((isSetToken()) ? 131071 : 524287);
    if (isSetToken())
      hashCode = hashCode * 8191 + token.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ConfigurationInput other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetKeyValueMap()).compareTo(other.isSetKeyValueMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeyValueMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keyValueMap, other.keyValueMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDeviceToken()).compareTo(other.isSetDeviceToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeviceToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceToken, other.deviceToken);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ConfigurationInput(");
    boolean first = true;

    sb.append("keyValueMap:");
    if (this.keyValueMap == null) {
      sb.append("null");
    } else {
      sb.append(this.keyValueMap);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("deviceToken:");
    if (this.deviceToken == null) {
      sb.append("null");
    } else {
      sb.append(this.deviceToken);
    }
    first = false;
    if (isSetToken()) {
      if (!first) sb.append(", ");
      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (keyValueMap == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'keyValueMap' was not present! Struct: " + toString());
    }
    if (deviceToken == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'deviceToken' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ConfigurationInputStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ConfigurationInputStandardScheme getScheme() {
      return new ConfigurationInputStandardScheme();
    }
  }

  private static class ConfigurationInputStandardScheme extends org.apache.thrift.scheme.StandardScheme<ConfigurationInput> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ConfigurationInput struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // KEY_VALUE_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.keyValueMap = new java.util.HashMap<java.lang.String,java.nio.ByteBuffer>(2*_map0.size);
                java.lang.String _key1;
                java.nio.ByteBuffer _val2;
                for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                {
                  _key1 = iprot.readString();
                  _val2 = iprot.readBinary();
                  struct.keyValueMap.put(_key1, _val2);
                }
                iprot.readMapEnd();
              }
              struct.setKeyValueMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DEVICE_TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deviceToken = iprot.readString();
              struct.setDeviceTokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.token = iprot.readString();
              struct.setTokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ConfigurationInput struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.keyValueMap != null) {
        oprot.writeFieldBegin(KEY_VALUE_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.keyValueMap.size()));
          for (java.util.Map.Entry<java.lang.String, java.nio.ByteBuffer> _iter4 : struct.keyValueMap.entrySet())
          {
            oprot.writeString(_iter4.getKey());
            oprot.writeBinary(_iter4.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.deviceToken != null) {
        oprot.writeFieldBegin(DEVICE_TOKEN_FIELD_DESC);
        oprot.writeString(struct.deviceToken);
        oprot.writeFieldEnd();
      }
      if (struct.token != null) {
        if (struct.isSetToken()) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ConfigurationInputTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ConfigurationInputTupleScheme getScheme() {
      return new ConfigurationInputTupleScheme();
    }
  }

  private static class ConfigurationInputTupleScheme extends org.apache.thrift.scheme.TupleScheme<ConfigurationInput> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ConfigurationInput struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      {
        oprot.writeI32(struct.keyValueMap.size());
        for (java.util.Map.Entry<java.lang.String, java.nio.ByteBuffer> _iter5 : struct.keyValueMap.entrySet())
        {
          oprot.writeString(_iter5.getKey());
          oprot.writeBinary(_iter5.getValue());
        }
      }
      oprot.writeString(struct.deviceToken);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetToken()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetToken()) {
        oprot.writeString(struct.token);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ConfigurationInput struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.keyValueMap = new java.util.HashMap<java.lang.String,java.nio.ByteBuffer>(2*_map6.size);
        java.lang.String _key7;
        java.nio.ByteBuffer _val8;
        for (int _i9 = 0; _i9 < _map6.size; ++_i9)
        {
          _key7 = iprot.readString();
          _val8 = iprot.readBinary();
          struct.keyValueMap.put(_key7, _val8);
        }
      }
      struct.setKeyValueMapIsSet(true);
      struct.deviceToken = iprot.readString();
      struct.setDeviceTokenIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.token = iprot.readString();
        struct.setTokenIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

