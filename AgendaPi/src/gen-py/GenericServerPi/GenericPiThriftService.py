#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport


class Iface(object):
    def handleRequest(self, input):
        """
        Parameters:
         - input
        """
        pass

    def getDefaultModuleConfig(self):
        pass

    def ping(self, pingObject):
        """
        Parameters:
         - pingObject
        """
        pass


class Client(Iface):
    def __init__(self, iprot, oprot=None):
        self._iprot = self._oprot = iprot
        if oprot is not None:
            self._oprot = oprot
        self._seqid = 0

    def handleRequest(self, input):
        """
        Parameters:
         - input
        """
        self.send_handleRequest(input)
        return self.recv_handleRequest()

    def send_handleRequest(self, input):
        self._oprot.writeMessageBegin('handleRequest', TMessageType.CALL, self._seqid)
        args = handleRequest_args()
        args.input = input
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_handleRequest(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = handleRequest_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.endPointUnavailiable is not None:
            raise result.endPointUnavailiable
        if result.thriftException is not None:
            raise result.thriftException
        raise TApplicationException(TApplicationException.MISSING_RESULT, "handleRequest failed: unknown result")

    def getDefaultModuleConfig(self):
        self.send_getDefaultModuleConfig()
        return self.recv_getDefaultModuleConfig()

    def send_getDefaultModuleConfig(self):
        self._oprot.writeMessageBegin('getDefaultModuleConfig', TMessageType.CALL, self._seqid)
        args = getDefaultModuleConfig_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getDefaultModuleConfig(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getDefaultModuleConfig_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getDefaultModuleConfig failed: unknown result")

    def ping(self, pingObject):
        """
        Parameters:
         - pingObject
        """
        self.send_ping(pingObject)
        self.recv_ping()

    def send_ping(self, pingObject):
        self._oprot.writeMessageBegin('ping', TMessageType.CALL, self._seqid)
        args = ping_args()
        args.pingObject = pingObject
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_ping(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = ping_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.endPointUnavailiable is not None:
            raise result.endPointUnavailiable
        if result.thriftException is not None:
            raise result.thriftException
        return


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["handleRequest"] = Processor.process_handleRequest
        self._processMap["getDefaultModuleConfig"] = Processor.process_getDefaultModuleConfig
        self._processMap["ping"] = Processor.process_ping

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_handleRequest(self, seqid, iprot, oprot):
        args = handleRequest_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = handleRequest_result()
        try:
            result.success = self._handler.handleRequest(args.input)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except ThriftException.ttypes.ExternalEndpointUnavailable as endPointUnavailiable:
            msg_type = TMessageType.REPLY
            result.endPointUnavailiable = endPointUnavailiable
        except ThriftException.ttypes.ThriftServiceException as thriftException:
            msg_type = TMessageType.REPLY
            result.thriftException = thriftException
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("handleRequest", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getDefaultModuleConfig(self, seqid, iprot, oprot):
        args = getDefaultModuleConfig_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getDefaultModuleConfig_result()
        try:
            result.success = self._handler.getDefaultModuleConfig()
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getDefaultModuleConfig", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_ping(self, seqid, iprot, oprot):
        args = ping_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = ping_result()
        try:
            self._handler.ping(args.pingObject)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except ThriftException.ttypes.ExternalEndpointUnavailable as endPointUnavailiable:
            msg_type = TMessageType.REPLY
            result.endPointUnavailiable = endPointUnavailiable
        except ThriftException.ttypes.ThriftServiceException as thriftException:
            msg_type = TMessageType.REPLY
            result.thriftException = thriftException
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("ping", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class handleRequest_args(object):
    """
    Attributes:
     - input
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'input', 'BINARY', None, ),  # 1
    )

    def __init__(self, input=None,):
        self.input = input

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.input = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('handleRequest_args')
        if self.input is not None:
            oprot.writeFieldBegin('input', TType.STRING, 1)
            oprot.writeBinary(self.input)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class handleRequest_result(object):
    """
    Attributes:
     - success
     - endPointUnavailiable
     - thriftException
    """

    thrift_spec = (
        (0, TType.STRING, 'success', 'BINARY', None, ),  # 0
        (1, TType.STRUCT, 'endPointUnavailiable', (ThriftException.ttypes.ExternalEndpointUnavailable, ThriftException.ttypes.ExternalEndpointUnavailable.thrift_spec), None, ),  # 1
        (2, TType.STRUCT, 'thriftException', (ThriftException.ttypes.ThriftServiceException, ThriftException.ttypes.ThriftServiceException.thrift_spec), None, ),  # 2
    )

    def __init__(self, success=None, endPointUnavailiable=None, thriftException=None,):
        self.success = success
        self.endPointUnavailiable = endPointUnavailiable
        self.thriftException = thriftException

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRING:
                    self.success = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.endPointUnavailiable = ThriftException.ttypes.ExternalEndpointUnavailable()
                    self.endPointUnavailiable.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.thriftException = ThriftException.ttypes.ThriftServiceException()
                    self.thriftException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('handleRequest_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRING, 0)
            oprot.writeBinary(self.success)
            oprot.writeFieldEnd()
        if self.endPointUnavailiable is not None:
            oprot.writeFieldBegin('endPointUnavailiable', TType.STRUCT, 1)
            self.endPointUnavailiable.write(oprot)
            oprot.writeFieldEnd()
        if self.thriftException is not None:
            oprot.writeFieldBegin('thriftException', TType.STRUCT, 2)
            self.thriftException.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getDefaultModuleConfig_args(object):

    thrift_spec = (
    )

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getDefaultModuleConfig_args')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getDefaultModuleConfig_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRING, 'success', 'BINARY', None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRING:
                    self.success = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getDefaultModuleConfig_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRING, 0)
            oprot.writeBinary(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ping_args(object):
    """
    Attributes:
     - pingObject
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'pingObject', (GenericStruct.ttypes.PingObject, GenericStruct.ttypes.PingObject.thrift_spec), None, ),  # 1
    )

    def __init__(self, pingObject=None,):
        self.pingObject = pingObject

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.pingObject = GenericStruct.ttypes.PingObject()
                    self.pingObject.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('ping_args')
        if self.pingObject is not None:
            oprot.writeFieldBegin('pingObject', TType.STRUCT, 1)
            self.pingObject.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ping_result(object):
    """
    Attributes:
     - endPointUnavailiable
     - thriftException
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'endPointUnavailiable', (ThriftException.ttypes.ExternalEndpointUnavailable, ThriftException.ttypes.ExternalEndpointUnavailable.thrift_spec), None, ),  # 1
        (2, TType.STRUCT, 'thriftException', (ThriftException.ttypes.ThriftServiceException, ThriftException.ttypes.ThriftServiceException.thrift_spec), None, ),  # 2
    )

    def __init__(self, endPointUnavailiable=None, thriftException=None,):
        self.endPointUnavailiable = endPointUnavailiable
        self.thriftException = thriftException

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.endPointUnavailiable = ThriftException.ttypes.ExternalEndpointUnavailable()
                    self.endPointUnavailiable.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.thriftException = ThriftException.ttypes.ThriftServiceException()
                    self.thriftException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('ping_result')
        if self.endPointUnavailiable is not None:
            oprot.writeFieldBegin('endPointUnavailiable', TType.STRUCT, 1)
            self.endPointUnavailiable.write(oprot)
            oprot.writeFieldEnd()
        if self.thriftException is not None:
            oprot.writeFieldBegin('thriftException', TType.STRUCT, 2)
            self.thriftException.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
